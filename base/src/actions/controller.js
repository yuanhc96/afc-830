//This file is automatically generated

 //groovy服务接口
let GroovyController = {
    __name: 'GroovyController',
    validateGroovyScript: {controller: 'GroovyController' , method: 'validateGroovyScript'}, // Groovy脚本语法校验
};
 //日志查看接口
let LoggerController = {
    __name: 'LoggerController',
    disableLog: {controller: 'LoggerController' , method: 'disableLog'}, // 取消日志记录
    enableLog: {controller: 'LoggerController' , method: 'enableLog'}, // 激活日志记录
    getLogFileNames: {controller: 'LoggerController' , method: 'getLogFileNames'}, // 取得日志文件名称列表
    getLogs: {controller: 'LoggerController' , method: 'getLogs'}, // 取得日志内容
};
 //job-Code处理器
let JobCodeController = {
    __name: 'JobCodeController',
    queryGluesByJobId: {controller: 'JobCodeController' , method: 'queryGluesByJobId'}, // queryGluesByJobId
    save: {controller: 'JobCodeController' , method: 'save'}, // save
};
 //job-api处理器
let JobApiController = {
    __name: 'JobApiController',
    api: {controller: 'JobApiController' , method: 'api'}, // api
};
 //job-group处理器
let JobGroupController = {
    __name: 'JobGroupController',
    loadById: {controller: 'JobGroupController' , method: 'loadById'}, // loadById
    pageList: {controller: 'JobGroupController' , method: 'pageList'}, // pageList
    remove: {controller: 'JobGroupController' , method: 'remove'}, // remove
    save: {controller: 'JobGroupController' , method: 'save'}, // save
    update: {controller: 'JobGroupController' , method: 'update'}, // update
};
 //job-index处理器
let JobIndexController = {
    __name: 'JobIndexController',
    chartInfo: {controller: 'JobIndexController' , method: 'chartInfo'}, // chartInfo
};
 //job-info处理器
let JobInfoController = {
    __name: 'JobInfoController',
    add: {controller: 'JobInfoController' , method: 'add'}, // add
    nextTriggerTime: {controller: 'JobInfoController' , method: 'nextTriggerTime'}, // nextTriggerTime
    pageList: {controller: 'JobInfoController' , method: 'pageList'}, // pageList
    pause: {controller: 'JobInfoController' , method: 'pause'}, // pause
    remove: {controller: 'JobInfoController' , method: 'remove'}, // remove
    start: {controller: 'JobInfoController' , method: 'start'}, // start
    triggerJob: {controller: 'JobInfoController' , method: 'triggerJob'}, // triggerJob
    update: {controller: 'JobInfoController' , method: 'update'}, // update
};
 //job-log处理器
let JobLogController = {
    __name: 'JobLogController',
    clearLog: {controller: 'JobLogController' , method: 'clearLog'}, // clearLog
    getJobsByGroup: {controller: 'JobLogController' , method: 'getJobsByGroup'}, // getJobsByGroup
    logDetailCat: {controller: 'JobLogController' , method: 'logDetailCat'}, // logDetailCat
    logKill: {controller: 'JobLogController' , method: 'logKill'}, // logKill
    pageList: {controller: 'JobLogController' , method: 'pageList'}, // pageList
};
 //BFP流程定义管理
let BfpProcessManagerController = {
    __name: 'BfpProcessManagerController',
    deleteProcessById: {controller: 'BfpProcessManagerController' , method: 'deleteProcessById'}, // 根据流程定义id删除定义信息（包含流程实例）
    deleteProcessDefine: {controller: 'BfpProcessManagerController' , method: 'deleteProcessDefine'}, // 删除流程定义
    exportProcess: {controller: 'BfpProcessManagerController' , method: 'exportProcess'}, // 导出流程
    getAllProcessByProcessDefName: {controller: 'BfpProcessManagerController' , method: 'getAllProcessByProcessDefName'}, // 通过流程定义名称获取所有流程定义版本信息
    importProcess: {controller: 'BfpProcessManagerController' , method: 'importProcess'}, // 导入文件解析流程
    publishProcess: {controller: 'BfpProcessManagerController' , method: 'publishProcess'}, // 发布某流程定义模板的指定版本
    queryAuditLog: {controller: 'BfpProcessManagerController' , method: 'queryAuditLog'}, // 查询审计日志
    queryAutoActivityInException: {controller: 'BfpProcessManagerController' , method: 'queryAutoActivityInException'}, // 查询异常活动
    queryBpsTenant: {controller: 'BfpProcessManagerController' , method: 'queryBpsTenant'}, // 查询bps多租户信息
    queryProcessDefineInfosByAppCode: {controller: 'BfpProcessManagerController' , method: 'queryProcessDefineInfosByAppCode'}, // 根据应用编码查询应用下全部流程
    queryProcessDefinesInAppSum: {controller: 'BfpProcessManagerController' , method: 'queryProcessDefinesInAppSum'}, // 获取应用流程数量
    unpublishProcess: {controller: 'BfpProcessManagerController' , method: 'unpublishProcess'}, // 取消某流程定义的发布
    updateAppBpsTenants: {controller: 'BfpProcessManagerController' , method: 'updateAppBpsTenants'}, // 更新应用绑定的流程租户信息
    updateProcessDefinesApp: {controller: 'BfpProcessManagerController' , method: 'updateProcessDefinesApp'}, // 更新流程定义应用信息
};
 //交接管理
let BfpHandoverManagerController = {
    __name: 'BfpHandoverManagerController',
    deleteAgent: {controller: 'BfpHandoverManagerController' , method: 'deleteAgent'}, // 复杂删除代理
    exeSimpleHandover: {controller: 'BfpHandoverManagerController' , method: 'exeSimpleHandover'}, // 简单交接
    handoverProDef: {controller: 'BfpHandoverManagerController' , method: 'handoverProDef'}, // 复杂交接流程定义
    handoverWItem: {controller: 'BfpHandoverManagerController' , method: 'handoverWItem'}, // 复杂交接工作项
    queryAgent: {controller: 'BfpHandoverManagerController' , method: 'queryAgent'}, // 代理查询
    queryHandoverWorklist: {controller: 'BfpHandoverManagerController' , method: 'queryHandoverWorklist'}, // 普通查询列表
    queryProDef: {controller: 'BfpHandoverManagerController' , method: 'queryProDef'}, // 流程定义查询
    queryWorkitem: {controller: 'BfpHandoverManagerController' , method: 'queryWorkitem'}, // 工作项查询
};
 //代办管理
let BfpDelegateManagerController = {
    __name: 'BfpDelegateManagerController',
    delegateWI: {controller: 'BfpDelegateManagerController' , method: 'delegateWI'}, // 设置代理
    queryDelegate: {controller: 'BfpDelegateManagerController' , method: 'queryDelegate'}, // 条件查询代理
    queryDelegateByFrom: {controller: 'BfpDelegateManagerController' , method: 'queryDelegateByFrom'}, // 通过委托人查询
};
 //代理管理
let BfpAgentManagerController = {
    __name: 'BfpAgentManagerController',
    addAgentScope: {controller: 'BfpAgentManagerController' , method: 'addAgentScope'}, // 新增代理范围
    addFullAgentWs: {controller: 'BfpAgentManagerController' , method: 'addFullAgentWs'}, // 添加完全代理
    addPartAgent1Ws: {controller: 'BfpAgentManagerController' , method: 'addPartAgent1Ws'}, // 添加部分代理第一个页面调用接口
    addPartAgent2Ws: {controller: 'BfpAgentManagerController' , method: 'addPartAgent2Ws'}, // 添加部分代理第二个页面调用接口
    agentDetailInfo: {controller: 'BfpAgentManagerController' , method: 'agentDetailInfo'}, // 获取代理详细信息(代理人信息、委托人信息、流程信息)
    deleteAgentScope: {controller: 'BfpAgentManagerController' , method: 'deleteAgentScope'}, // 删除代理范围
    deleteAgentWs: {controller: 'BfpAgentManagerController' , method: 'deleteAgentWs'}, // 删除代理
    modFullAgentWS: {controller: 'BfpAgentManagerController' , method: 'modFullAgentWS'}, // 修改完全代理
    modPartAgent1WS: {controller: 'BfpAgentManagerController' , method: 'modPartAgent1WS'}, // 修改部分代理第一个页面调用
    modPartAgent2WS: {controller: 'BfpAgentManagerController' , method: 'modPartAgent2WS'}, // 修改部分代理第二个页面调用
    queryAgentDetailWS: {controller: 'BfpAgentManagerController' , method: 'queryAgentDetailWS'}, // 查询代理详情
    queryAgentScope: {controller: 'BfpAgentManagerController' , method: 'queryAgentScope'}, // 查询活动和流程
    queryAgentWS: {controller: 'BfpAgentManagerController' , method: 'queryAgentWS'}, // 查询代理
    resetAgentScope: {controller: 'BfpAgentManagerController' , method: 'resetAgentScope'}, // 恢复默认范围
    selectProcessAndActivity: {controller: 'BfpAgentManagerController' , method: 'selectProcessAndActivity'}, // 查询活动和流程
};
 //参与者日历管理
let BfpParticipantCalendarController = {
    __name: 'BfpParticipantCalendarController',
    deleteBizCalendar: {controller: 'BfpParticipantCalendarController' , method: 'deleteBizCalendar'}, // 删除工作日历
    deleteBizCalendarList: {controller: 'BfpParticipantCalendarController' , method: 'deleteBizCalendarList'}, // 批量删除工作日历
    deleteCaleparti: {controller: 'BfpParticipantCalendarController' , method: 'deleteCaleparti'}, // 删除参与者日历
    queryCalendarDetailsByMonth: {controller: 'BfpParticipantCalendarController' , method: 'queryCalendarDetailsByMonth'}, // 查询日历明细
    queryCalendarList: {controller: 'BfpParticipantCalendarController' , method: 'queryCalendarList'}, // 查询符合条件的工作日历
    queryCaleparti: {controller: 'BfpParticipantCalendarController' , method: 'queryCaleparti'}, // 根据条件查询参与者日历列表
    saveBizCalendar: {controller: 'BfpParticipantCalendarController' , method: 'saveBizCalendar'}, // 保存工作日历
    saveCalendarDetail: {controller: 'BfpParticipantCalendarController' , method: 'saveCalendarDetail'}, // 保存日历明细
    saveCaleparti: {controller: 'BfpParticipantCalendarController' , method: 'saveCaleparti'}, // 保存参与者日历
    selectParticipants: {controller: 'BfpParticipantCalendarController' , method: 'selectParticipants'}, // 查询参与者日历树
};
 //工作项管理
let BfpWorkItemManagerController = {
    __name: 'BfpWorkItemManagerController',
    addWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'addWorkItem'}, // 创建工作项
    annotateWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'annotateWorkItem'}, // 批注工作项
    assignWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'assignWorkItem'}, // 分派/领取工作项
    commonQueryWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'commonQueryWorkItem'}, // 查询所有工作项(分页)
    delegateWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'delegateWorkItem'}, // 待办工作项
    deleteWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'deleteWorkItem'}, // 删除工作项
    findParticpantDetail: {controller: 'BfpWorkItemManagerController' , method: 'findParticpantDetail'}, // 查询参与者详请
    findWorkItemById: {controller: 'BfpWorkItemManagerController' , method: 'findWorkItemById'}, // 根据工作项id查询工作项
    finshWorkItem4ActivityInst: {controller: 'BfpWorkItemManagerController' , method: 'finshWorkItem4ActivityInst'}, // 完成活动实例的工作项
    finshWorkItem4Person: {controller: 'BfpWorkItemManagerController' , method: 'finshWorkItem4Person'}, // 完成工作项
    finshWorkItem4ProcessInst: {controller: 'BfpWorkItemManagerController' , method: 'finshWorkItem4ProcessInst'}, // 完成流程实例的工作项
    pressWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'pressWorkItem'}, // 催办工作项
    queryWorkItemListByActivityInstIDWithPage: {controller: 'BfpWorkItemManagerController' , method: 'queryWorkItemListByActivityInstIDWithPage'}, // 根据活动实例ID查询工作项(分页)
    queryWorkItemListByActivityInstIDWithoutPage: {controller: 'BfpWorkItemManagerController' , method: 'queryWorkItemListByActivityInstIDWithoutPage'}, // 根据活动实例ID查询工作项(不分页)
    queryWorkItemListByProcessInstIDWithPage: {controller: 'BfpWorkItemManagerController' , method: 'queryWorkItemListByProcessInstIDWithPage'}, // 查询某个流程实例下的所有工作项
    reassignWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'reassignWorkItem'}, // 改派工作项
    removeWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'removeWorkItem'}, // 移除工作项
    saveWorkItem: {controller: 'BfpWorkItemManagerController' , method: 'saveWorkItem'}, // 保存工作项
    saveWorkItemFlowx: {controller: 'BfpWorkItemManagerController' , method: 'saveWorkItemFlowx'}, // 保存工作项并显示
};
 //活动实例管理
let BfpActivityInstManagerController = {
    __name: 'BfpActivityInstManagerController',
    activationActivity: {controller: 'BfpActivityInstManagerController' , method: 'activationActivity'}, // 活动实例激活
    createAndStartActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'createAndStartActivityInst'}, // 创建并启动新的活动实例
    editActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'editActivityInst'}, // 修改活动实例
    findActivityInstDetail: {controller: 'BfpActivityInstManagerController' , method: 'findActivityInstDetail'}, // 获取活动实例详请
    finshActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'finshActivityInst'}, // 活动实例完成
    getActivityInstState: {controller: 'BfpActivityInstManagerController' , method: 'getActivityInstState'}, // 获取活动状态
    hasExisRunningActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'hasExisRunningActivityInst'}, // 是否存在运行的活动实例
    queryActivityDefByProcessDefId: {controller: 'BfpActivityInstManagerController' , method: 'queryActivityDefByProcessDefId'}, // 根据流程定义id获取活动实例
    queryActivityInstByProcessInstIdWithPage: {controller: 'BfpActivityInstManagerController' , method: 'queryActivityInstByProcessInstIdWithPage'}, // 活动实例列表
    queryAllActivityDefine: {controller: 'BfpActivityInstManagerController' , method: 'queryAllActivityDefine'}, // 获取所有的活动定义
    queryWithPage: {controller: 'BfpActivityInstManagerController' , method: 'queryWithPage'}, // 活动实例列表
    reStartActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'reStartActivityInst'}, // 重启活动实例
    resumeActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'resumeActivityInst'}, // 恢复活动实例
    rollbackActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'rollbackActivityInst'}, // 回退活动实例
    routeOtherActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'routeOtherActivityInst'}, // 路由到其他活动实例
    suspendActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'suspendActivityInst'}, // 挂起活动实例
    terminateActivityInst: {controller: 'BfpActivityInstManagerController' , method: 'terminateActivityInst'}, // 终止活动实例
};
 //流程中心流程定义管理
let ProcessDefCenterController = {
    __name: 'ProcessDefCenterController',
    createWFBizProcessDef: {controller: 'ProcessDefCenterController' , method: 'createWFBizProcessDef'}, // 创建流程定义
    existProcessDefName: {controller: 'ProcessDefCenterController' , method: 'existProcessDefName'}, // 检查流程定义名称是否唯一
    expandProcessDef: {controller: 'ProcessDefCenterController' , method: 'expandProcessDef'}, // 根据流程定义查询流程定义详情
    getProcessStringByIdToJson: {controller: 'ProcessDefCenterController' , method: 'getProcessStringByIdToJson'}, // 获取流程定义内容
    pickupBizProcess: {controller: 'ProcessDefCenterController' , method: 'pickupBizProcess'}, // 提取流程定义
    putinProcess: {controller: 'ProcessDefCenterController' , method: 'putinProcess'}, // 提交流程定义
    queryBizProcessByName: {controller: 'ProcessDefCenterController' , method: 'queryBizProcessByName'}, // 通过流程定义名称获取流程临时定义基本信息
    submitProcessForJson: {controller: 'ProcessDefCenterController' , method: 'submitProcessForJson'}, // 保存流程定义
    validateProcessForXML: {controller: 'ProcessDefCenterController' , method: 'validateProcessForXML'}, // 校验流程定义
    validateTempProcessByDefId: {controller: 'ProcessDefCenterController' , method: 'validateTempProcessByDefId'}, // 通过流程定义临时id校验流程定义
};
 //流程任务中心查询
let BfpClientController = {
    __name: 'BfpClientController',
    addProcessCollect: {controller: 'BfpClientController' , method: 'addProcessCollect'}, // 新增流程收藏
    deleteProcessCollect: {controller: 'BfpClientController' , method: 'deleteProcessCollect'}, // 删除流程收藏
    deleteProcessDraftById: {controller: 'BfpClientController' , method: 'deleteProcessDraftById'}, // 删除我的草稿
    getBackConfigByDefID: {controller: 'BfpClientController' , method: 'getBackConfigByDefID'}, // 根据流程定义id和活动定义id查询活动节点撤回配置
    getPressByDefID: {controller: 'BfpClientController' , method: 'getPressByDefID'}, // 根据流程定义id和活动定义id查询活动是否可被催办配置
    getPressDetails: {controller: 'BfpClientController' , method: 'getPressDetails'}, // 根据工作项id查询催办详情
    isDrawbackEnable: {controller: 'BfpClientController' , method: 'isDrawbackEnable'}, // 判断任务是否可以拽回
    isDrawbackEnableWithBatch: {controller: 'BfpClientController' , method: 'isDrawbackEnableWithBatch'}, // 批量判断任务是否可以拽回
    isPressEnableWithBatch: {controller: 'BfpClientController' , method: 'isPressEnableWithBatch'}, // 批量判断流程中正在运行工作项是否有可催办
    isProcessPressEnable: {controller: 'BfpClientController' , method: 'isProcessPressEnable'}, // 判断流程中正在运行工作项是否有可催办
    pressWorkItemByConfig: {controller: 'BfpClientController' , method: 'pressWorkItemByConfig'}, // 根据催办配置项条件催办流程中工作项
    previousHumanActivity: {controller: 'BfpClientController' , method: 'previousHumanActivity'}, // 查询最近人工活动
    queryBizColumnByProcessDefName: {controller: 'BfpClientController' , method: 'queryBizColumnByProcessDefName'}, // 根据流程定义名称查询流程扩展属性中配置业务字段
    queryContainProcessApps: {controller: 'BfpClientController' , method: 'queryContainProcessApps'}, // 查询有流程的应用
    queryCurrentActivitysByID: {controller: 'BfpClientController' , method: 'queryCurrentActivitysByID'}, // 根据流程实例ID查询当前活动
    queryCurrentActivitysParticipantByID: {controller: 'BfpClientController' , method: 'queryCurrentActivitysParticipantByID'}, // 根据流程实例ID查询当前活动参与者
    queryDraftRunContexts: {controller: 'BfpClientController' , method: 'queryDraftRunContexts'}, // 查询草稿运行上下文
    queryInternationalAttributeByProcessDefName: {controller: 'BfpClientController' , method: 'queryInternationalAttributeByProcessDefName'}, // 根据流程定义名称查询流程扩展属性中国际化相关配置
    queryOftenUseProcess: {controller: 'BfpClientController' , method: 'queryOftenUseProcess'}, // 查询当前用户常用的流程
    queryPersonApplyWorklistWithBizPage: {controller: 'BfpClientController' , method: 'queryPersonApplyWorklistWithBizPage'}, // 分页结合业务属性查询我的申请工作列表
    queryPersonApplyWorklistWithPage: {controller: 'BfpClientController' , method: 'queryPersonApplyWorklistWithPage'}, // 分页查询我的申请工作列表
    queryPersonFinishWorklistWithBizPage: {controller: 'BfpClientController' , method: 'queryPersonFinishWorklistWithBizPage'}, // 结合业务属性分页查询已办工作列表
    queryPersonFinishWorklistWithPage: {controller: 'BfpClientController' , method: 'queryPersonFinishWorklistWithPage'}, // 分页查询已办工作列表
    queryPersonPressWorklistWithPage: {controller: 'BfpClientController' , method: 'queryPersonPressWorklistWithPage'}, // 分页查询催办工作列表
    queryPersonWorkCount: {controller: 'BfpClientController' , method: 'queryPersonWorkCount'}, // 查询待办工作总数
    queryPersonWorkItemReviewsWithPage: {controller: 'BfpClientController' , method: 'queryPersonWorkItemReviewsWithPage'}, // 分页查询待阅已阅工作列表
    queryPersonWorklistSum: {controller: 'BfpClientController' , method: 'queryPersonWorklistSum'}, // 查询登录人待办工作数量
    queryPersonWorklistWithBizInfoPage: {controller: 'BfpClientController' , method: 'queryPersonWorklistWithBizInfoPage'}, // 分页查询待办工作列表(结合业务属性查询)
    queryPersonWorklistWithPage: {controller: 'BfpClientController' , method: 'queryPersonWorklistWithPage'}, // 分页查询待办工作列表
    queryPreviousActivitysByID: {controller: 'BfpClientController' , method: 'queryPreviousActivitysByID'}, // 根据活动实例ID查询上一活动
    queryPreviousActivitysParticipantByID: {controller: 'BfpClientController' , method: 'queryPreviousActivitysParticipantByID'}, // 根据活动实例ID查询上一活动参与者
    queryProcessCollectList: {controller: 'BfpClientController' , method: 'queryProcessCollectList'}, // 查询当前用户已收藏的流程
    queryProcessDraftListWithPage: {controller: 'BfpClientController' , method: 'queryProcessDraftListWithPage'}, // 查询草稿箱列表
    queryProcessNoticeInfoListWithPage: {controller: 'BfpClientController' , method: 'queryProcessNoticeInfoListWithPage'}, // 查询登录人通知列表
    queryRootCatalog: {controller: 'BfpClientController' , method: 'queryRootCatalog'}, // 查询根业务目录
    queryStartProcessListPermissionsWithPage: {controller: 'BfpClientController' , method: 'queryStartProcessListPermissionsWithPage'}, // 分页查询当前用户权限内可发起流程
    reviewWorkitems: {controller: 'BfpClientController' , method: 'reviewWorkitems'}, // 任务已阅处理
    saveOrUpdateActivityPress: {controller: 'BfpClientController' , method: 'saveOrUpdateActivityPress'}, // 保存或修改活动是否可被催办配置
    saveOrUpdateProcessBack: {controller: 'BfpClientController' , method: 'saveOrUpdateProcessBack'}, // 保存或修改活动撤回配置
    saveProcessDraft: {controller: 'BfpClientController' , method: 'saveProcessDraft'}, // 保存草稿操作
    setWorkitemOpenStatus: {controller: 'BfpClientController' , method: 'setWorkitemOpenStatus'}, // 待办任务打开设置任务openstatus
};
 //流程实例回收管理
let ProcessInstRecycleManageController = {
    __name: 'ProcessInstRecycleManageController',
    deleteRecycleProcessInstBatch: {controller: 'ProcessInstRecycleManageController' , method: 'deleteRecycleProcessInstBatch'}, // 根据回收主键删除对应数据
    queryRecycleProcessInstList: {controller: 'ProcessInstRecycleManageController' , method: 'queryRecycleProcessInstList'}, // 条件查询被回收流程实例列表
    recoverProcessInst: {controller: 'ProcessInstRecycleManageController' , method: 'recoverProcessInst'}, // 恢复被回收流程实例
};
 //流程实例管理
let ProcessInstanceManageController = {
    __name: 'ProcessInstanceManageController',
    annotateProcessInst: {controller: 'ProcessInstanceManageController' , method: 'annotateProcessInst'}, // 批注流程实例
    changeProcessVersionBatch: {controller: 'ProcessInstanceManageController' , method: 'changeProcessVersionBatch'}, // 更换流程实例版本
    deleteProcessInstBatch: {controller: 'ProcessInstanceManageController' , method: 'deleteProcessInstBatch'}, // 删除流程实例
    getAllProcessVersionList: {controller: 'ProcessInstanceManageController' , method: 'getAllProcessVersionList'}, // 通过流程定义id获取所有流程定义版本
    getFixedCatalogRoot: {controller: 'ProcessInstanceManageController' , method: 'getFixedCatalogRoot'}, // 查询顶级业务目录树
    getProcessInstState: {controller: 'ProcessInstanceManageController' , method: 'getProcessInstState'}, // 获取流程实例状态
    getProcessVersions: {controller: 'ProcessInstanceManageController' , method: 'getProcessVersions'}, // 查询流程定义版本
    getRelaDataString: {controller: 'ProcessInstanceManageController' , method: 'getRelaDataString'}, // 查询相关数据
    getSubCatalogAndProcess: {controller: 'ProcessInstanceManageController' , method: 'getSubCatalogAndProcess'}, // 查询子业务目录及流程定义
    pressProcessInst: {controller: 'ProcessInstanceManageController' , method: 'pressProcessInst'}, // 催办流程实例
    queryProcessInstList: {controller: 'ProcessInstanceManageController' , method: 'queryProcessInstList'}, // 条件查询流程实例列表
    queryProcessInstView: {controller: 'ProcessInstanceManageController' , method: 'queryProcessInstView'}, // 查询流程实例视图
    resumeProcessInstance: {controller: 'ProcessInstanceManageController' , method: 'resumeProcessInstance'}, // 恢复流程实例
    saveRelativeData: {controller: 'ProcessInstanceManageController' , method: 'saveRelativeData'}, // 保存相关数据
    startProcessInstance: {controller: 'ProcessInstanceManageController' , method: 'startProcessInstance'}, // 启动流程实例
    suspendProcessInst: {controller: 'ProcessInstanceManageController' , method: 'suspendProcessInst'}, // 挂起流程实例
    terminateProcessInstance: {controller: 'ProcessInstanceManageController' , method: 'terminateProcessInstance'}, // 终止流程实例
};
 //流程汇总管理
let BfpStatisticsManagerController = {
    __name: 'BfpStatisticsManagerController',
    etlCollect: {controller: 'BfpStatisticsManagerController' , method: 'etlCollect'}, // 执行汇总
    isInitHistroryData: {controller: 'BfpStatisticsManagerController' , method: 'isInitHistroryData'}, // 是否需要初始化历史数据
    queryPersonTaskStatisticsLast7Days: {controller: 'BfpStatisticsManagerController' , method: 'queryPersonTaskStatisticsLast7Days'}, // 查询员工个人流程统计数据(widget窗口)
    queryTaskStatisticCount: {controller: 'BfpStatisticsManagerController' , method: 'queryTaskStatisticCount'}, // 查询员工个人流程统计待办、待阅、催办数量
    readEtlConfigModel: {controller: 'BfpStatisticsManagerController' , method: 'readEtlConfigModel'}, // 获取etl配置
    readEtlEmail: {controller: 'BfpStatisticsManagerController' , method: 'readEtlEmail'}, // 获取etl邮箱收件人
    readEtlMethod: {controller: 'BfpStatisticsManagerController' , method: 'readEtlMethod'}, // 获取etl汇总方法
};
 //流程租户管理
let BfpMultiTenantManagerController = {
    __name: 'BfpMultiTenantManagerController',
    addTenant: {controller: 'BfpMultiTenantManagerController' , method: 'addTenant'}, // 增加bps租户
    deleteTenant: {controller: 'BfpMultiTenantManagerController' , method: 'deleteTenant'}, // 删除租户
    getTenantIdentityToken: {controller: 'BfpMultiTenantManagerController' , method: 'getTenantIdentityToken'}, // 查询bps租户的token
    queryAllTenants: {controller: 'BfpMultiTenantManagerController' , method: 'queryAllTenants'}, // 查询所有bps租户
    updateTenant: {controller: 'BfpMultiTenantManagerController' , method: 'updateTenant'}, // 更新bps租户
};
 //流程配置中心管理
let BfpProcessConfigController = {
    __name: 'BfpProcessConfigController',
    deleteProcessStarter: {controller: 'BfpProcessConfigController' , method: 'deleteProcessStarter'}, // 删除业务流程定义的启动者权限
    deployProcess: {controller: 'BfpProcessConfigController' , method: 'deployProcess'}, // 部署流程
    getConstantExtendAttributes: {controller: 'BfpProcessConfigController' , method: 'getConstantExtendAttributes'}, // 获取业务流程常量的扩展属性
    getExtendAttributes: {controller: 'BfpProcessConfigController' , method: 'getExtendAttributes'}, // 获取业务流程和活动定义的扩展属性
    getProcessActionEvent: {controller: 'BfpProcessConfigController' , method: 'getProcessActionEvent'}, // 获取流程按钮事件配置
    getProcessActivityActions: {controller: 'BfpProcessConfigController' , method: 'getProcessActivityActions'}, // 获取流程活动授权操作
    getProcessActivityMessages: {controller: 'BfpProcessConfigController' , method: 'getProcessActivityMessages'}, // 获取流程活动消息
    getProcessActivityParticipant: {controller: 'BfpProcessConfigController' , method: 'getProcessActivityParticipant'}, // 获取流程活动参与者
    getProcessDefineProperties: {controller: 'BfpProcessConfigController' , method: 'getProcessDefineProperties'}, // 查询流程定义属性
    getProcessGraph: {controller: 'BfpProcessConfigController' , method: 'getProcessGraph'}, // 获取流程图数据
    getProcessStarter: {controller: 'BfpProcessConfigController' , method: 'getProcessStarter'}, // 获取业务流程定义的启动者权限
    getStartProcessVariableContexts: {controller: 'BfpProcessConfigController' , method: 'getStartProcessVariableContexts'}, // 查询流程启动变量上下文
    queryActivityTimeInfoByProcessDefId: {controller: 'BfpProcessConfigController' , method: 'queryActivityTimeInfoByProcessDefId'}, // 查询流程开启时间限制的人工活动
    queryAllAppInternalProcessDefs: {controller: 'BfpProcessConfigController' , method: 'queryAllAppInternalProcessDefs'}, // 根据名称查询全部应用下的流程定义
    queryAllManualActivities: {controller: 'BfpProcessConfigController' , method: 'queryAllManualActivities'}, // 查询流程全部人工活动
    queryParticipantRulesByProcessDefId: {controller: 'BfpProcessConfigController' , method: 'queryParticipantRulesByProcessDefId'}, // 查询流程配置的引擎级别参与者规则
    queryProcessVersions: {controller: 'BfpProcessConfigController' , method: 'queryProcessVersions'}, // 查询流程定义的所有版本
    setParticipantForActDef: {controller: 'BfpProcessConfigController' , method: 'setParticipantForActDef'}, // 活动定义设置引擎参与者规则
    setProcessActionEvent: {controller: 'BfpProcessConfigController' , method: 'setProcessActionEvent'}, // 设置流程按钮事件配置
    setProcessActivityActions: {controller: 'BfpProcessConfigController' , method: 'setProcessActivityActions'}, // 设置流程活动授权操作
    setProcessActivityMessages: {controller: 'BfpProcessConfigController' , method: 'setProcessActivityMessages'}, // 设置流程活动消息
    setProcessActivityParticipant: {controller: 'BfpProcessConfigController' , method: 'setProcessActivityParticipant'}, // 设置流程活动参与者
    setProcessConstants: {controller: 'BfpProcessConfigController' , method: 'setProcessConstants'}, // 设置流程常量
    setProcessStarter: {controller: 'BfpProcessConfigController' , method: 'setProcessStarter'}, // 设置业务流程定义的启动者权限
    updateProcessDefineProperties: {controller: 'BfpProcessConfigController' , method: 'updateProcessDefineProperties'}, // 更新流程定义属性
};
 //cm
let CmController = {
    __name: 'CmController',
    ceshi: {controller: 'CmController' , method: 'ceshi'}, // 测试保存实体图元保存创建人id
    newbiz: {controller: 'CmController' , method: 'newbiz'}, // newbiz
    tel: {controller: 'CmController' , method: 'tel'}, // 手机归属地查询
};
 //UI
let UiController = {
    __name: 'UiController',
    newbiz: {controller: 'UiController' , method: 'newbiz'}, // newbiz
    newbiz2: {controller: 'UiController' , method: 'newbiz2'}, // newbiz2
    newbiz3: {controller: 'UiController' , method: 'newbiz3'}, // newbiz3
};
 //wangbl
let WangblController = {
    __name: 'WangblController',
    newbiz: {controller: 'WangblController' , method: 'newbiz'}, // newbiz
};
 //common
let CommonController = {
    __name: 'CommonController',
    getEntity: {controller: 'CommonController' , method: 'getEntity'}, // 获取实体
    newbiz: {controller: 'CommonController' , method: 'newbiz'}, // 批量保存用户信息
};
 //summer
let SummerController = {
    __name: 'SummerController',
    newbiz: {controller: 'SummerController' , method: 'newbiz'}, // newbiz
};
 //test
let TestController = {
    __name: 'TestController',
    newbiz3: {controller: 'TestController' , method: 'newbiz3'}, // 实体服务测试
    newbiz4: {controller: 'TestController' , method: 'newbiz4'}, // 流程模板
    teacher: {controller: 'TestController' , method: 'teacher'}, // 批量删除实体服务
    teacher: {controller: 'TestController' , method: 'teacher'}, // 批量查询实体服务
    teacher: {controller: 'TestController' , method: 'teacher'}, // teacher_create
    teacher: {controller: 'TestController' , method: 'teacher'}, // teacher_delete
    teacher: {controller: 'TestController' , method: 'teacher'}, // teacher_findById
    teacher: {controller: 'TestController' , method: 'teacher'}, // teacher_query
    teacher: {controller: 'TestController' , method: 'teacher'}, // teacher_update
};
 //newcomponent
let NewcomponentController = {
    __name: 'NewcomponentController',
    testbiz: {controller: 'NewcomponentController' , method: 'testbiz'}, // 登录
};
 //xifanzhou
let XifanzhouController = {
    __name: 'XifanzhouController',
    newbiz: {controller: 'XifanzhouController' , method: 'newbiz'}, // newbiz
    newbiz1: {controller: 'XifanzhouController' , method: 'newbiz1'}, // newbiz
    newbiz1111111111: {controller: 'XifanzhouController' , method: 'newbiz1111111111'}, // newbiz
    newbiz2: {controller: 'XifanzhouController' , method: 'newbiz2'}, // newbiz2
    newbiz3: {controller: 'XifanzhouController' , method: 'newbiz3'}, // newbiz4
};
 //ton0110
let Ton0110Controller = {
    __name: 'Ton0110Controller',
    Entity: {controller: 'Ton0110Controller' , method: 'Entity'}, // 新增实体服务
    Entity: {controller: 'Ton0110Controller' , method: 'Entity'}, // 删除实体服务
    Entity: {controller: 'Ton0110Controller' , method: 'Entity'}, // 根据ID查询实体服务
    Entity: {controller: 'Ton0110Controller' , method: 'Entity'}, // 分页查询实体服务
    Entity: {controller: 'Ton0110Controller' , method: 'Entity'}, // 修改实体服务
    newbiz: {controller: 'Ton0110Controller' , method: 'newbiz'}, // newbiz
    onApprove: {controller: 'Ton0110Controller' , method: 'onApprove'}, // 审批通过
    onDrawback: {controller: 'Ton0110Controller' , method: 'onDrawback'}, // 审批通过后撤回
    testEntity: {controller: 'Ton0110Controller' , method: 'testEntity'}, // 新增实体服务
    testEntity: {controller: 'Ton0110Controller' , method: 'testEntity'}, // 删除实体服务
    testEntity: {controller: 'Ton0110Controller' , method: 'testEntity'}, // 根据ID查询实体服务
    testEntity: {controller: 'Ton0110Controller' , method: 'testEntity'}, // 分页查询实体服务
    testEntity: {controller: 'Ton0110Controller' , method: 'testEntity'}, // 修改实体服务
};
 //wy0404
let Wy0404Controller = {
    __name: 'Wy0404Controller',
    Entity15: {controller: 'Wy0404Controller' , method: 'Entity15'}, // 新增实体服务
    Entity15: {controller: 'Wy0404Controller' , method: 'Entity15'}, // 删除实体服务
    Entity15: {controller: 'Wy0404Controller' , method: 'Entity15'}, // 根据ID查询实体服务
    Entity15: {controller: 'Wy0404Controller' , method: 'Entity15'}, // 分页查询实体服务
    Entity15: {controller: 'Wy0404Controller' , method: 'Entity15'}, // 修改实体服务
    Entity16: {controller: 'Wy0404Controller' , method: 'Entity16'}, // 新增实体服务
    Entity16: {controller: 'Wy0404Controller' , method: 'Entity16'}, // 删除实体服务
    Entity16: {controller: 'Wy0404Controller' , method: 'Entity16'}, // 根据ID查询实体服务
    Entity16: {controller: 'Wy0404Controller' , method: 'Entity16'}, // 分页查询实体服务
    Entity16: {controller: 'Wy0404Controller' , method: 'Entity16'}, // 修改实体服务
    Entity2: {controller: 'Wy0404Controller' , method: 'Entity2'}, // 新增实体服务
    Entity2: {controller: 'Wy0404Controller' , method: 'Entity2'}, // 删除实体服务
    Entity2: {controller: 'Wy0404Controller' , method: 'Entity2'}, // 根据ID查询实体服务
    Entity2: {controller: 'Wy0404Controller' , method: 'Entity2'}, // 分页查询实体服务
    Entity2: {controller: 'Wy0404Controller' , method: 'Entity2'}, // 修改实体服务
    Entity3: {controller: 'Wy0404Controller' , method: 'Entity3'}, // 新增实体服务
    Entity3: {controller: 'Wy0404Controller' , method: 'Entity3'}, // 删除实体服务
    Entity3: {controller: 'Wy0404Controller' , method: 'Entity3'}, // 根据ID查询实体服务
    Entity3: {controller: 'Wy0404Controller' , method: 'Entity3'}, // 分页查询实体服务
    Entity3: {controller: 'Wy0404Controller' , method: 'Entity3'}, // 修改实体服务
    Entity31: {controller: 'Wy0404Controller' , method: 'Entity31'}, // 新增实体服务
    Entity31: {controller: 'Wy0404Controller' , method: 'Entity31'}, // 删除实体服务
    Entity31: {controller: 'Wy0404Controller' , method: 'Entity31'}, // 根据ID查询实体服务
    Entity31: {controller: 'Wy0404Controller' , method: 'Entity31'}, // 分页查询实体服务
    Entity31: {controller: 'Wy0404Controller' , method: 'Entity31'}, // 修改实体服务
    Entity4: {controller: 'Wy0404Controller' , method: 'Entity4'}, // 新增实体服务
    Entity4: {controller: 'Wy0404Controller' , method: 'Entity4'}, // 删除实体服务
    Entity4: {controller: 'Wy0404Controller' , method: 'Entity4'}, // 根据ID查询实体服务
    Entity4: {controller: 'Wy0404Controller' , method: 'Entity4'}, // 分页查询实体服务
    Entity4: {controller: 'Wy0404Controller' , method: 'Entity4'}, // 修改实体服务
    Entity5: {controller: 'Wy0404Controller' , method: 'Entity5'}, // 新增实体服务
    Entity5: {controller: 'Wy0404Controller' , method: 'Entity5'}, // 删除实体服务
    Entity5: {controller: 'Wy0404Controller' , method: 'Entity5'}, // 根据ID查询实体服务
    Entity5: {controller: 'Wy0404Controller' , method: 'Entity5'}, // 分页查询实体服务
    Entity5: {controller: 'Wy0404Controller' , method: 'Entity5'}, // 修改实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 批量删除实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 批量查询实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 新增实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 删除实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 根据ID查询实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 分页查询实体服务
    Entity50: {controller: 'Wy0404Controller' , method: 'Entity50'}, // 修改实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 批量删除实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 批量查询实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 新增实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 删除实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 根据ID查询实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 分页查询实体服务
    Entity51: {controller: 'Wy0404Controller' , method: 'Entity51'}, // 修改实体服务
};
 //letters
let LettersController = {
    __name: 'LettersController',
    ZJAddParticipant: {controller: 'LettersController' , method: 'ZJAddParticipant'}, // 转交添加参与者-copy
    afterCreateWorkitem: {controller: 'LettersController' , method: 'afterCreateWorkitem'}, // newbiz
    firstSubmit: {controller: 'LettersController' , method: 'firstSubmit'}, // 首次提交-copy
    laterSubmit: {controller: 'LettersController' , method: 'laterSubmit'}, // 后续提交-copy
    mock: {controller: 'LettersController' , method: 'mock'}, // 验证暂存
    newbiz1: {controller: 'LettersController' , method: 'newbiz1'}, // 首次提交
    newbiztest: {controller: 'LettersController' , method: 'newbiztest'}, // test
    newres: {controller: 'LettersController' , method: 'newres'}, // 验证添加参与者
    nextSubmit: {controller: 'LettersController' , method: 'nextSubmit'}, // 后续提交
    qqqq: {controller: 'LettersController' , method: 'qqqq'}, // qqqq
    successUpStatus: {controller: 'LettersController' , method: 'successUpStatus'}, // 审批成功修改状态
    updateBohuiStatus: {controller: 'LettersController' , method: 'updateBohuiStatus'}, // 驳回时修改状态
    xinfangsubmit: {controller: 'LettersController' , method: 'xinfangsubmit'}, // 信访申请提交保存
};
 //yuan_test
let Yuan_testController = {
    __name: 'Yuan_testController',
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // 新增实体服务
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // 删除实体服务
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // 根据ID查询实体服务
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // 分页查询实体服务
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // 修改实体服务
    yuan: {controller: 'Yuan_testController' , method: 'yuan'}, // newbiz
};
 //yang
let YangController = {
    __name: 'YangController',
    newbizas: {controller: 'YangController' , method: 'newbizas'}, // newbizas
};
 //ton0309
let Ton0309Controller = {
    __name: 'Ton0309Controller',
    newbiz: {controller: 'Ton0309Controller' , method: 'newbiz'}, // newbiz
};
 //zhaoel
let ZhaoelController = {
    __name: 'ZhaoelController',
    newbiz: {controller: 'ZhaoelController' , method: 'newbiz'}, // newbiz
    newbiz11212: {controller: 'ZhaoelController' , method: 'newbiz11212'}, // 张撒啊啊
    newbizaaaa: {controller: 'ZhaoelController' , method: 'newbizaaaa'}, // newbizaaaaaaa
    newbizaaaaa: {controller: 'ZhaoelController' , method: 'newbizaaaaa'}, // newbizaaaaaa
    newbizasxds: {controller: 'ZhaoelController' , method: 'newbizasxds'}, // newbizssa
    newbizces: {controller: 'ZhaoelController' , method: 'newbizces'}, // newbizces
};
 //licy_test
let Licy_testController = {
    __name: 'Licy_testController',
    licy: {controller: 'Licy_testController' , method: 'licy'}, // newbiz
    licy: {controller: 'Licy_testController' , method: 'licy'}, // newbiz
};
 //cyxdingdan
let CyxdingdanController = {
    __name: 'CyxdingdanController',
    app: {controller: 'CyxdingdanController' , method: 'app'}, // 审批提交示例
    callback: {controller: 'CyxdingdanController' , method: 'callback'}, // 撤回示例
};
 //bizflow
let BizflowController = {
    __name: 'BizflowController',
    queryUsers: {controller: 'BizflowController' , method: 'queryUsers'}, // queryUsers
};
 //digitallab
let DigitallabController = {
    __name: 'DigitallabController',
    persontype: {controller: 'DigitallabController' , method: 'persontype'}, // 人员类别
};
 //demo
let DemoController = {
    __name: 'DemoController',
    newbiz: {controller: 'DemoController' , method: 'newbiz'}, // newbiz
    newbiz2: {controller: 'DemoController' , method: 'newbiz2'}, // newbiz2
};
 //xifanTest
let XifantestController = {
    __name: 'XifantestController',
    newbiz: {controller: 'XifantestController' , method: 'newbiz'}, // newbiz
    newbiz222: {controller: 'XifantestController' , method: 'newbiz222'}, // newbiz
};
 //BFP流程任务中心管理
let LowcodeBfpTaskCenterController = {
    __name: 'LowcodeBfpTaskCenterController',
    queryPersonFinishWorklistWithPage: {controller: 'LowcodeBfpTaskCenterController' , method: 'queryPersonFinishWorklistWithPage'}, // 分页查询已办工作列表
    queryPersonWorklistWithPage: {controller: 'LowcodeBfpTaskCenterController' , method: 'queryPersonWorklistWithPage'}, // 分页查询待办工作列表
};
 //业务资源管理
let LowcodeBizResourceController = {
    __name: 'LowcodeBizResourceController',
    queryBizCatalogsByProject: {controller: 'LowcodeBizResourceController' , method: 'queryBizCatalogsByProject'}, // 查询项目下业务目录树
    queryBizResourcesByCatalog: {controller: 'LowcodeBizResourceController' , method: 'queryBizResourcesByCatalog'}, // 查询业务目录下的业务资源列表
    queryBizResourcesByProjectAndType: {controller: 'LowcodeBizResourceController' , method: 'queryBizResourcesByProjectAndType'}, // 查询项目下某种类型的业务资源列表
};
 //低开MDM集成服务
let LowcodeIntegrationMdmController = {
    __name: 'LowcodeIntegrationMdmController',
    approve: {controller: 'LowcodeIntegrationMdmController' , method: 'approve'}, // 批准数据
    deprecate: {controller: 'LowcodeIntegrationMdmController' , method: 'deprecate'}, // 废弃数据
    disable: {controller: 'LowcodeIntegrationMdmController' , method: 'disable'}, // 停用数据
    enable: {controller: 'LowcodeIntegrationMdmController' , method: 'enable'}, // 启用数据
    getDataModel: {controller: 'LowcodeIntegrationMdmController' , method: 'getDataModel'}, // 获取数据模型信息
    getDictModel: {controller: 'LowcodeIntegrationMdmController' , method: 'getDictModel'}, // 获取业务字典模型数据
    isEnabled: {controller: 'LowcodeIntegrationMdmController' , method: 'isEnabled'}, // 是否启用
    push: {controller: 'LowcodeIntegrationMdmController' , method: 'push'}, // 推送数据
    queryDataModels: {controller: 'LowcodeIntegrationMdmController' , method: 'queryDataModels'}, // 查询MDM数据模型
    queryDictModelsWithPage: {controller: 'LowcodeIntegrationMdmController' , method: 'queryDictModelsWithPage'}, // 分页查询业务字典类型数据
    queryDictsWithPage: {controller: 'LowcodeIntegrationMdmController' , method: 'queryDictsWithPage'}, // 分页查询业务字典数据
    reject: {controller: 'LowcodeIntegrationMdmController' , method: 'reject'}, // 退回数据
    release: {controller: 'LowcodeIntegrationMdmController' , method: 'release'}, // 发布数据
    revise: {controller: 'LowcodeIntegrationMdmController' , method: 'revise'}, // 修订数据
    validate: {controller: 'LowcodeIntegrationMdmController' , method: 'validate'}, // 校验数据
};
 //低开三方服务集成管理
let LowcodeServiceIntegrationController = {
    __name: 'LowcodeServiceIntegrationController',
    createOperationSet: {controller: 'LowcodeServiceIntegrationController' , method: 'createOperationSet'}, // 创建服务集
    deleteOperationSetById: {controller: 'LowcodeServiceIntegrationController' , method: 'deleteOperationSetById'}, // 删除服务集
    existsByCode: {controller: 'LowcodeServiceIntegrationController' , method: 'existsByCode'}, // 校验code是否重复
    findOperationById: {controller: 'LowcodeServiceIntegrationController' , method: 'findOperationById'}, // 根据id查询服务操作(以及详情)
    findOperationEntitySetById: {controller: 'LowcodeServiceIntegrationController' , method: 'findOperationEntitySetById'}, // 根据id查询服务操作实体集
    findOperationSetById: {controller: 'LowcodeServiceIntegrationController' , method: 'findOperationSetById'}, // 根据id查询服务集(查询详情)
    importSwaggerToOperationSet: {controller: 'LowcodeServiceIntegrationController' , method: 'importSwaggerToOperationSet'}, // 根据上传文件(优先)或者指定URL以及指定的swaggerApiIds来创建服务集
    parseSwaggerApis: {controller: 'LowcodeServiceIntegrationController' , method: 'parseSwaggerApis'}, // 根据上传文件(优先)或者指定URL解析Swagger
    queryEntityDetails: {controller: 'LowcodeServiceIntegrationController' , method: 'queryEntityDetails'}, // 查询指定三方服务实体信息
    showForce: {controller: 'LowcodeServiceIntegrationController' , method: 'showForce'}, // 导入单个服务集校验：存在相同服务集是否强制导入
    updateOperationSetBasicInfo: {controller: 'LowcodeServiceIntegrationController' , method: 'updateOperationSetBasicInfo'}, // 修改服务集(基本信息、认证配置、地址等)
};
 //低开列表通用数据模型管理
let LowcodeColumnModelController = {
    __name: 'LowcodeColumnModelController',
    clone: {controller: 'LowcodeColumnModelController' , method: 'clone'}, // 克隆低开数据模型
    create: {controller: 'LowcodeColumnModelController' , method: 'create'}, // 创建低开数据模型
    delete: {controller: 'LowcodeColumnModelController' , method: 'delete'}, // 删除低开数据模型
    downloadAttachment: {controller: 'LowcodeColumnModelController' , method: 'downloadAttachment'}, // 下载附件
    existsByCondition: {controller: 'LowcodeColumnModelController' , method: 'existsByCondition'}, // 根据条件校验是否存在
    get: {controller: 'LowcodeColumnModelController' , method: 'get'}, // 获取低开数据模型
    getAttachment: {controller: 'LowcodeColumnModelController' , method: 'getAttachment'}, // 获取附件
    getAttachmentContent: {controller: 'LowcodeColumnModelController' , method: 'getAttachmentContent'}, // 获取附件文本内容
    getDetails: {controller: 'LowcodeColumnModelController' , method: 'getDetails'}, // 获取低开数据模型详情
    previewAttachment: {controller: 'LowcodeColumnModelController' , method: 'previewAttachment'}, // 预览附件
    queryWithPage: {controller: 'LowcodeColumnModelController' , method: 'queryWithPage'}, // 分页查询低开数据模型
    removeAttachment: {controller: 'LowcodeColumnModelController' , method: 'removeAttachment'}, // 删除附件
    save: {controller: 'LowcodeColumnModelController' , method: 'save'}, // 保存低开数据模型
    update: {controller: 'LowcodeColumnModelController' , method: 'update'}, // 更新低开数据模型
    uploadAttachments: {controller: 'LowcodeColumnModelController' , method: 'uploadAttachments'}, // 上传附件
};
 //低开实体数据源关联关系管理
let LowcodeEntityDatasourceController = {
    __name: 'LowcodeEntityDatasourceController',
    delete: {controller: 'LowcodeEntityDatasourceController' , method: 'delete'}, // 删除低开实体数据源关联关系
    get: {controller: 'LowcodeEntityDatasourceController' , method: 'get'}, // 获取低开实体数据源关联关系
    merge: {controller: 'LowcodeEntityDatasourceController' , method: 'merge'}, // 合并低开实体数据源关联关系
    queryWithPage: {controller: 'LowcodeEntityDatasourceController' , method: 'queryWithPage'}, // 分页查询低开实体数据源关联关系
    save: {controller: 'LowcodeEntityDatasourceController' , method: 'save'}, // 保存低开实体数据源关联关系
};
 //低开导入记录管理
let LowcodeImportHistoryController = {
    __name: 'LowcodeImportHistoryController',
    queryWithPage: {controller: 'LowcodeImportHistoryController' , method: 'queryWithPage'}, // 分页查询导入日志列表
};
 //低开工作流在线编辑器管理
let LowcodeWorkflowEditorController = {
    __name: 'LowcodeWorkflowEditorController',
    ExtendCallBack: {controller: 'LowcodeWorkflowEditorController' , method: 'ExtendCallBack'}, // 回填活动扩展信息
    cloneProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'cloneProcess'}, // 克隆低开流程
    extractionProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'extractionProcess'}, // 提取流程
    getActivityExtendInfo: {controller: 'LowcodeWorkflowEditorController' , method: 'getActivityExtendInfo'}, // 获取活动扩展信息
    getBackConfigByDefID: {controller: 'LowcodeWorkflowEditorController' , method: 'getBackConfigByDefID'}, // 根据流程定义id和活动定义id查询活动节点撤回配置
    getBizOptByID: {controller: 'LowcodeWorkflowEditorController' , method: 'getBizOptByID'}, // 根据ID获取业务操作
    getBizOptsByNames: {controller: 'LowcodeWorkflowEditorController' , method: 'getBizOptsByNames'}, // 根据名称获取业务操作列表
    getBizVarsByNames: {controller: 'LowcodeWorkflowEditorController' , method: 'getBizVarsByNames'}, // 根据名称获取业务变量列表
    getBizVarsByProcessDefID: {controller: 'LowcodeWorkflowEditorController' , method: 'getBizVarsByProcessDefID'}, // 根据流程定义获取业务变量列表
    getBranchRulesByDefID: {controller: 'LowcodeWorkflowEditorController' , method: 'getBranchRulesByDefID'}, // 根据流程定义获取分支规则列表
    getBusiPackInfoByBusiCatalogID: {controller: 'LowcodeWorkflowEditorController' , method: 'getBusiPackInfoByBusiCatalogID'}, // 获取Business Pack信息
    getCalendars: {controller: 'LowcodeWorkflowEditorController' , method: 'getCalendars'}, // 获取日历列表
    getCatlogById: {controller: 'LowcodeWorkflowEditorController' , method: 'getCatlogById'}, // 获取业务目录信息
    getChildParticipants: {controller: 'LowcodeWorkflowEditorController' , method: 'getChildParticipants'}, // 获取子参与者
    getFormTemplateList: {controller: 'LowcodeWorkflowEditorController' , method: 'getFormTemplateList'}, // 获取表单
    getMessageChannel: {controller: 'LowcodeWorkflowEditorController' , method: 'getMessageChannel'}, // 获取消息通道枚举
    getParticipantRulesByDefID: {controller: 'LowcodeWorkflowEditorController' , method: 'getParticipantRulesByDefID'}, // 获取参与者规则列表
    getParticipantTypes: {controller: 'LowcodeWorkflowEditorController' , method: 'getParticipantTypes'}, // 获取参与者类型列表
    getProcessExtendInfo: {controller: 'LowcodeWorkflowEditorController' , method: 'getProcessExtendInfo'}, // 获取流程中所有扩展信息
    getProcessStringByDefId: {controller: 'LowcodeWorkflowEditorController' , method: 'getProcessStringByDefId'}, // 获取流程内容
    getProcessStringByDefIdToJson: {controller: 'LowcodeWorkflowEditorController' , method: 'getProcessStringByDefIdToJson'}, // 获取流程内容(Json)
    getProcessesByDefID: {controller: 'LowcodeWorkflowEditorController' , method: 'getProcessesByDefID'}, // 根据父流程ID获取子流程列表
    getResourceByCatlogId: {controller: 'LowcodeWorkflowEditorController' , method: 'getResourceByCatlogId'}, // 根据业务目录ID获取业务资源
    getRuleByID: {controller: 'LowcodeWorkflowEditorController' , method: 'getRuleByID'}, // 获取规则
    getSubNodesByCatlogIdWithPerm: {controller: 'LowcodeWorkflowEditorController' , method: 'getSubNodesByCatlogIdWithPerm'}, // 根据业务目录ID获取子业务目录
    getUseableBizResourcesByCurCID: {controller: 'LowcodeWorkflowEditorController' , method: 'getUseableBizResourcesByCurCID'}, // 根据业务目录ID获取子业务目录
    hasBizFormCustomizeModule: {controller: 'LowcodeWorkflowEditorController' , method: 'hasBizFormCustomizeModule'}, // 是否有表单自定义模块
    processDefinitionDetail: {controller: 'LowcodeWorkflowEditorController' , method: 'processDefinitionDetail'}, // 通过流程定义名称和版本获取流程详请
    processDefinitionDetailWithJson: {controller: 'LowcodeWorkflowEditorController' , method: 'processDefinitionDetailWithJson'}, // 通过流程定义名称和版本获取流程详请(JSON格式)
    publishProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'publishProcess'}, // 发布某流程定义模板的指定版本
    queryCalendarDetailsByMonth: {controller: 'LowcodeWorkflowEditorController' , method: 'queryCalendarDetailsByMonth'}, // 根据月份获取日历详情
    queryMessageTemplateWithPage: {controller: 'LowcodeWorkflowEditorController' , method: 'queryMessageTemplateWithPage'}, // 分页查询模板信息
    queryProcessChNameByName: {controller: 'LowcodeWorkflowEditorController' , method: 'queryProcessChNameByName'}, // 根据月份获取日历详情
    queryProcessesByName: {controller: 'LowcodeWorkflowEditorController' , method: 'queryProcessesByName'}, // 根据流程定义名流程定义列表
    saveBizOperation: {controller: 'LowcodeWorkflowEditorController' , method: 'saveBizOperation'}, // 保存业务操作
    saveBizResourceBatch: {controller: 'LowcodeWorkflowEditorController' , method: 'saveBizResourceBatch'}, // 保存业务操作
    saveBizVar: {controller: 'LowcodeWorkflowEditorController' , method: 'saveBizVar'}, // 保存业务变量
    saveCalendarDetails: {controller: 'LowcodeWorkflowEditorController' , method: 'saveCalendarDetails'}, // 保存日历详情列表
    saveHumanTask: {controller: 'LowcodeWorkflowEditorController' , method: 'saveHumanTask'}, // 保存人工任务
    saveOrUpdateProcessBack: {controller: 'LowcodeWorkflowEditorController' , method: 'saveOrUpdateProcessBack'}, // 保存或修改活动撤回配置
    saveRule: {controller: 'LowcodeWorkflowEditorController' , method: 'saveRule'}, // 保存业务规则
    simulatePublishedProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'simulatePublishedProcess'}, // 流程仿真接口
    submitProcessForJson: {controller: 'LowcodeWorkflowEditorController' , method: 'submitProcessForJson'}, // 提交业务流程
    unpublishProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'unpublishProcess'}, // 取消某流程定义的发布
    updateProcessChName: {controller: 'LowcodeWorkflowEditorController' , method: 'updateProcessChName'}, // 修改流程定义中文名称
    validateProcess: {controller: 'LowcodeWorkflowEditorController' , method: 'validateProcess'}, // 校验流程内容
    validateRule: {controller: 'LowcodeWorkflowEditorController' , method: 'validateRule'}, // 校验流程内容
};
 //低开工具服务
let LowcodeToolController = {
    __name: 'LowcodeToolController',
    xmlOrJson: {controller: 'LowcodeToolController' , method: 'xmlOrJson'}, // xml-json互转
};
 //低开构件包管理
let LowcodeContributionController = {
    __name: 'LowcodeContributionController',
    clone: {controller: 'LowcodeContributionController' , method: 'clone'}, // 克隆低开构件包
    create: {controller: 'LowcodeContributionController' , method: 'create'}, // 创建低开构件包
    delete: {controller: 'LowcodeContributionController' , method: 'delete'}, // 删除低开构件包
    existenceByCode: {controller: 'LowcodeContributionController' , method: 'existenceByCode'}, // 校验code是否存在
    get: {controller: 'LowcodeContributionController' , method: 'get'}, // 获取低开构件包
    load: {controller: 'LowcodeContributionController' , method: 'load'}, // 加载低开构件包
    queryWithPage: {controller: 'LowcodeContributionController' , method: 'queryWithPage'}, // 分页查询低开构件包
    update: {controller: 'LowcodeContributionController' , method: 'update'}, // 更新低开构件包
};
 //低开调试管理
let LowcodeDebugController = {
    __name: 'LowcodeDebugController',
    deleteBizBreakpoint: {controller: 'LowcodeDebugController' , method: 'deleteBizBreakpoint'}, // 删除逻辑流断点
    deleteBizBreakpoints: {controller: 'LowcodeDebugController' , method: 'deleteBizBreakpoints'}, // 批量删除逻辑流断点
    executeExpression: {controller: 'LowcodeDebugController' , method: 'executeExpression'}, // 执行表达式的值
    getCurrentBizBreakpoint: {controller: 'LowcodeDebugController' , method: 'getCurrentBizBreakpoint'}, // 查询并开启逻辑流当前停住的断点
    queryBizBreakpoints: {controller: 'LowcodeDebugController' , method: 'queryBizBreakpoints'}, // 查询逻辑流断点
    queryBizDebugVars: {controller: 'LowcodeDebugController' , method: 'queryBizDebugVars'}, // 获取逻辑流调试变量信息
    queryLatestBizDebugVars: {controller: 'LowcodeDebugController' , method: 'queryLatestBizDebugVars'}, // 获取最新的逻辑流调试变量信息
    resumeBizBreakpoint: {controller: 'LowcodeDebugController' , method: 'resumeBizBreakpoint'}, // 执行逻辑流到下一个断点
    saveBizBreakpoint: {controller: 'LowcodeDebugController' , method: 'saveBizBreakpoint'}, // 保存逻辑流断点
    setBizDebugVarValue: {controller: 'LowcodeDebugController' , method: 'setBizDebugVarValue'}, // 设置逻辑流调试变量值
    shutdownBizDebug: {controller: 'LowcodeDebugController' , method: 'shutdownBizDebug'}, // 关闭调试
    stepOverBizBreakpoint: {controller: 'LowcodeDebugController' , method: 'stepOverBizBreakpoint'}, // 执行一步逻辑流
};
 //低开资源关联关系管理
let LowcodeResourceIndexController = {
    __name: 'LowcodeResourceIndexController',
    queryRelationModels: {controller: 'LowcodeResourceIndexController' , method: 'queryRelationModels'}, // 根据实体名称查询引用的实体或者被引用的实体信息
    queryRelationResources: {controller: 'LowcodeResourceIndexController' , method: 'queryRelationResources'}, // 查询实体关联的资源信息
};
 //低开资源分组管理
let LowcodeResourceGroupController = {
    __name: 'LowcodeResourceGroupController',
    create: {controller: 'LowcodeResourceGroupController' , method: 'create'}, // 创建低开资源分组
    delete: {controller: 'LowcodeResourceGroupController' , method: 'delete'}, // 根据id删除低开资源分组信息(支持批量删除)
    existsByCode: {controller: 'LowcodeResourceGroupController' , method: 'existsByCode'}, // 校验code是否重复
    get: {controller: 'LowcodeResourceGroupController' , method: 'get'}, // 根据id或者code查询资源分组
    queryWithPage: {controller: 'LowcodeResourceGroupController' , method: 'queryWithPage'}, // 分页查询低开资源分组列表
    update: {controller: 'LowcodeResourceGroupController' , method: 'update'}, // 修改低开资源分组
};
 //低开资源回收站管理
let LowcodeResourceRecycleController = {
    __name: 'LowcodeResourceRecycleController',
    queryWithPage: {controller: 'LowcodeResourceRecycleController' , method: 'queryWithPage'}, // 分页查询低开资源资源回收站资源列表
    restore: {controller: 'LowcodeResourceRecycleController' , method: 'restore'}, // 还原回收站内自定资源(支持批量还原)
};
 //低开资源管理
let LowcodeResourceController = {
    __name: 'LowcodeResourceController',
    clone: {controller: 'LowcodeResourceController' , method: 'clone'}, // 克隆低开资源
    compile: {controller: 'LowcodeResourceController' , method: 'compile'}, // 编译低开资源
    create: {controller: 'LowcodeResourceController' , method: 'create'}, // 创建低开资源
    delete: {controller: 'LowcodeResourceController' , method: 'delete'}, // 删除低开资源
    downloadExportTemplate: {controller: 'LowcodeResourceController' , method: 'downloadExportTemplate'}, // 下载视图导入模板
    downloadImportTemplate: {controller: 'LowcodeResourceController' , method: 'downloadImportTemplate'}, // 下载视图导入模板
    downloadResource: {controller: 'LowcodeResourceController' , method: 'downloadResource'}, // 下载资源
    existenceByCode: {controller: 'LowcodeResourceController' , method: 'existenceByCode'}, // 校验code是否存在
    exportPdf: {controller: 'LowcodeResourceController' , method: 'exportPdf'}, // 导出pdf
    exportView: {controller: 'LowcodeResourceController' , method: 'exportView'}, // 导出视图excel
    get: {controller: 'LowcodeResourceController' , method: 'get'}, // 获取低开资源
    getDetails: {controller: 'LowcodeResourceController' , method: 'getDetails'}, // 获取低开资源详情
    getHistory: {controller: 'LowcodeResourceController' , method: 'getHistory'}, // 获取低开资源历史详情
    getRuntime: {controller: 'LowcodeResourceController' , method: 'getRuntime'}, // 获取低开运行时资源
    importViewData: {controller: 'LowcodeResourceController' , method: 'importViewData'}, // 视图数据导入
    index: {controller: 'LowcodeResourceController' , method: 'index'}, // 低开资源索引生成
    load: {controller: 'LowcodeResourceController' , method: 'load'}, // 加载低开资源
    printFormWithWordTemplate: {controller: 'LowcodeResourceController' , method: 'printFormWithWordTemplate'}, // 根据模板打印表单
    queryBIResources: {controller: 'LowcodeResourceController' , method: 'queryBIResources'}, // 查询应用下所有BI资源
    queryHistorys: {controller: 'LowcodeResourceController' , method: 'queryHistorys'}, // 获取低开资源历史
    queryResourceFunctionCodes: {controller: 'LowcodeResourceController' , method: 'queryResourceFunctionCodes'}, // 获取低开资源绑定的功能码
    queryRuntimes: {controller: 'LowcodeResourceController' , method: 'queryRuntimes'}, // 获取低开运行时资源
    queryWithPage: {controller: 'LowcodeResourceController' , method: 'queryWithPage'}, // 分页查询低开资源
    update: {controller: 'LowcodeResourceController' , method: 'update'}, // 更新低开资源
    updateBasicInfo: {controller: 'LowcodeResourceController' , method: 'updateBasicInfo'}, // 更新低开资源基本信息
    updateContent: {controller: 'LowcodeResourceController' , method: 'updateContent'}, // 更新低开资源内容
    updateContentWithRuntime: {controller: 'LowcodeResourceController' , method: 'updateContentWithRuntime'}, // 更新低开资源内容，并且携带运行时内容，前端编译时场景
    updateResourceGroup: {controller: 'LowcodeResourceController' , method: 'updateResourceGroup'}, // 移动低开资源目录(不传默认移动到根目录-未分组)
    uploadResource: {controller: 'LowcodeResourceController' , method: 'uploadResource'}, // 上传资源内容
};
 //低开运行时管理
let LowcodeRuntimeController = {
    __name: 'LowcodeRuntimeController',
    queryBizLogics: {controller: 'LowcodeRuntimeController' , method: 'queryBizLogics'}, // 查询运行时逻辑流
    queryBizlets: {controller: 'LowcodeRuntimeController' , method: 'queryBizlets'}, // 查询运行时运算逻辑
    queryEosservices: {controller: 'LowcodeRuntimeController' , method: 'queryEosservices'}, // 查询运行时EOS服务
    querySdoTypes: {controller: 'LowcodeRuntimeController' , method: 'querySdoTypes'}, // 查询运行时sdo类型
};
 //低开通用数据模型管理
let LowcodeModelController = {
    __name: 'LowcodeModelController',
    clone: {controller: 'LowcodeModelController' , method: 'clone'}, // 克隆低开数据模型
    create: {controller: 'LowcodeModelController' , method: 'create'}, // 创建低开数据模型
    delete: {controller: 'LowcodeModelController' , method: 'delete'}, // 删除低开数据模型
    downloadAttachment: {controller: 'LowcodeModelController' , method: 'downloadAttachment'}, // 下载附件
    existsByCondition: {controller: 'LowcodeModelController' , method: 'existsByCondition'}, // 根据条件校验是否存在
    generateNumber: {controller: 'LowcodeModelController' , method: 'generateNumber'}, // 根据属性编号规则，生成编号
    get: {controller: 'LowcodeModelController' , method: 'get'}, // 获取低开数据模型
    getAttachment: {controller: 'LowcodeModelController' , method: 'getAttachment'}, // 获取附件
    getAttachmentContent: {controller: 'LowcodeModelController' , method: 'getAttachmentContent'}, // 获取附件文本内容
    getDetails: {controller: 'LowcodeModelController' , method: 'getDetails'}, // 获取低开数据模型详情
    previewAttachment: {controller: 'LowcodeModelController' , method: 'previewAttachment'}, // 预览附件
    queryWithPage: {controller: 'LowcodeModelController' , method: 'queryWithPage'}, // 分页查询低开数据模型
    removeAttachment: {controller: 'LowcodeModelController' , method: 'removeAttachment'}, // 删除附件
    save: {controller: 'LowcodeModelController' , method: 'save'}, // 保存低开数据模型
    update: {controller: 'LowcodeModelController' , method: 'update'}, // 更新低开数据模型
    uploadAttachments: {controller: 'LowcodeModelController' , method: 'uploadAttachments'}, // 上传附件
};
 //低开项目分支管理
let LowcodeProjectBranchController = {
    __name: 'LowcodeProjectBranchController',
    checkout: {controller: 'LowcodeProjectBranchController' , method: 'checkout'}, // 切换分支
    create: {controller: 'LowcodeProjectBranchController' , method: 'create'}, // 创建低开项目分支
    delete: {controller: 'LowcodeProjectBranchController' , method: 'delete'}, // 根据id删除低开项目分支信息(支持批量删除)
    deleteByAppName: {controller: 'LowcodeProjectBranchController' , method: 'deleteByAppName'}, // 根据低开应用名称删除低开项目分支信息
    existsByName: {controller: 'LowcodeProjectBranchController' , method: 'existsByName'}, // 校验分支名称是否重复
    get: {controller: 'LowcodeProjectBranchController' , method: 'get'}, // 根据id查询项目分支
    getAppCurrentBranch: {controller: 'LowcodeProjectBranchController' , method: 'getAppCurrentBranch'}, // 查询应用当前分支信息
    queryWithPage: {controller: 'LowcodeProjectBranchController' , method: 'queryWithPage'}, // 分页查询低开项目分支列表
    updateBasic: {controller: 'LowcodeProjectBranchController' , method: 'updateBasic'}, // 修改低开项目分支-基本信息
};
 //低开项目基线管理
let LowcodeProjectBaselineController = {
    __name: 'LowcodeProjectBaselineController',
    checkImportProjectBaseline: {controller: 'LowcodeProjectBaselineController' , method: 'checkImportProjectBaseline'}, // 校验导入基线是否相同
    create: {controller: 'LowcodeProjectBaselineController' , method: 'create'}, // 创建低开项目基线
    delete: {controller: 'LowcodeProjectBaselineController' , method: 'delete'}, // 根据id删除低开项目基线信息(支持批量删除)
    deleteByAppName: {controller: 'LowcodeProjectBaselineController' , method: 'deleteByAppName'}, // 根据低开应用名称删除低开项目基线信息
    existsByName: {controller: 'LowcodeProjectBaselineController' , method: 'existsByName'}, // 校验基线名称是否重复
    get: {controller: 'LowcodeProjectBaselineController' , method: 'get'}, // 根据id查询项目基线
    getAppCurrentBaseline: {controller: 'LowcodeProjectBaselineController' , method: 'getAppCurrentBaseline'}, // 查询应用当前基线信息
    queryWithPage: {controller: 'LowcodeProjectBaselineController' , method: 'queryWithPage'}, // 分页查询低开项目基线列表
    update: {controller: 'LowcodeProjectBaselineController' , method: 'update'}, // 修改低开项目基线
};
 //低开项目管理
let LowcodeProjectController = {
    __name: 'LowcodeProjectController',
    countResources: {controller: 'LowcodeProjectController' , method: 'countResources'}, // 统计当前应用内各资源类型的数量
    exportArtifact: {controller: 'LowcodeProjectController' , method: 'exportArtifact'}, // 导出介质
    exportContributionOrResource: {controller: 'LowcodeProjectController' , method: 'exportContributionOrResource'}, // 导出构建包(支持构建包和资源选择导出)
    exportProject: {controller: 'LowcodeProjectController' , method: 'exportProject'}, // 导出项目
    exportSdoStaticSource: {controller: 'LowcodeProjectController' , method: 'exportSdoStaticSource'}, // 导出SDO静态代码
    exportSource: {controller: 'LowcodeProjectController' , method: 'exportSource'}, // 导出源码
    getNewerResourceTree: {controller: 'LowcodeProjectController' , method: 'getNewerResourceTree'}, // 获取更加新的低开项目资源树信息
    importContributionOrResource: {controller: 'LowcodeProjectController' , method: 'importContributionOrResource'}, // 导入构建包
    importProject: {controller: 'LowcodeProjectController' , method: 'importProject'}, // 导入项目(先调用解析接口解析数据再导入)
    importProjectForFile: {controller: 'LowcodeProjectController' , method: 'importProjectForFile'}, // 导入项目(根据上传文件导入)
    importProjectWithTemplate: {controller: 'LowcodeProjectController' , method: 'importProjectWithTemplate'}, // 导入项目(根据应用模板选择导入)
    importReset: {controller: 'LowcodeProjectController' , method: 'importReset'}, // 回退应用数据到上一个导入前
    importSource: {controller: 'LowcodeProjectController' , method: 'importSource'}, // 导入源码
    index: {controller: 'LowcodeProjectController' , method: 'index'}, // 低开项目（资源）生成索引
    load: {controller: 'LowcodeProjectController' , method: 'load'}, // 加载低开项目（资源）
    parseImportProject: {controller: 'LowcodeProjectController' , method: 'parseImportProject'}, // 根据上传文件解析上传数据
    queryAppsByCriteria: {controller: 'LowcodeProjectController' , method: 'queryAppsByCriteria'}, // 分页查询应用列表
    queryProjectsFunctionsByObjInstId: {controller: 'LowcodeProjectController' , method: 'queryProjectsFunctionsByObjInstId'}, // 返回低开项目功能码
    showForce: {controller: 'LowcodeProjectController' , method: 'showForce'}, // 导入构建包校验：存在相同构建包是否强制导入
    showReset: {controller: 'LowcodeProjectController' , method: 'showReset'}, // 是否显示回退
};
 //报表数据源和应用的关系管理
let LowcodeBiDatasourceController = {
    __name: 'LowcodeBiDatasourceController',
    create: {controller: 'LowcodeBiDatasourceController' , method: 'create'}, // 新增报表数据源和应用的关系
    deleteByIds: {controller: 'LowcodeBiDatasourceController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    queryBiDatasources: {controller: 'LowcodeBiDatasourceController' , method: 'queryBiDatasources'}, // 分页查询报表数据源和应用的关系列表
    update: {controller: 'LowcodeBiDatasourceController' , method: 'update'}, // 修改报表数据源和应用的关系
};
 //流程工作台接口
let LowcodeBfpWorkbenchController = {
    __name: 'LowcodeBfpWorkbenchController',
    assignWorkTask: {controller: 'LowcodeBfpWorkbenchController' , method: 'assignWorkTask'}, // 领取工作任务
    drawBackWorkTask: {controller: 'LowcodeBfpWorkbenchController' , method: 'drawBackWorkTask'}, // 撤回工作任务
    finishWorkitemBatch: {controller: 'LowcodeBfpWorkbenchController' , method: 'finishWorkitemBatch'}, // 流程批量审批操作
    withdrawWorkTask: {controller: 'LowcodeBfpWorkbenchController' , method: 'withdrawWorkTask'}, // 取消领取工作任务
};
 //组件分组管理
let LowcodeComponentGroupController = {
    __name: 'LowcodeComponentGroupController',
    create: {controller: 'LowcodeComponentGroupController' , method: 'create'}, // 创建组件分组
    deletes: {controller: 'LowcodeComponentGroupController' , method: 'deletes'}, // 按主键删除组件分组(支持批量删除)
    existenceByCode: {controller: 'LowcodeComponentGroupController' , method: 'existenceByCode'}, // 校验code是否存在
    findById: {controller: 'LowcodeComponentGroupController' , method: 'findById'}, // 查询(支持id或者code)
    queryWithPage: {controller: 'LowcodeComponentGroupController' , method: 'queryWithPage'}, // 分页查询
    update: {controller: 'LowcodeComponentGroupController' , method: 'update'}, // 修改组件分组
};
 //组件库管理
let LowcodeComponentController = {
    __name: 'LowcodeComponentController',
    create: {controller: 'LowcodeComponentController' , method: 'create'}, // 创建组件
    deletes: {controller: 'LowcodeComponentController' , method: 'deletes'}, // 按主键删除组件分组(支持批量删除)
    existenceByCode: {controller: 'LowcodeComponentController' , method: 'existenceByCode'}, // 校验code是否存在
    get: {controller: 'LowcodeComponentController' , method: 'get'}, // 按id或者code查询组件库信息
    queryWithPage: {controller: 'LowcodeComponentController' , method: 'queryWithPage'}, // 分页查询组件库列表
    update: {controller: 'LowcodeComponentController' , method: 'update'}, // 修改
};
 //项目数据源管理
let LowcodeDataSourceController = {
    __name: 'LowcodeDataSourceController',
    createDBTables: {controller: 'LowcodeDataSourceController' , method: 'createDBTables'}, // 创建数据库表(返回值key：successful,unsuccessful,error)
    dropTable: {controller: 'LowcodeDataSourceController' , method: 'dropTable'}, // 删除指定表
    executeStructuredQL: {controller: 'LowcodeDataSourceController' , method: 'executeStructuredQL'}, // 执行SQL语句
    executeStructuredQLs: {controller: 'LowcodeDataSourceController' , method: 'executeStructuredQLs'}, // 执行SQL脚本
    generateColumnPropertyByRunSql: {controller: 'LowcodeDataSourceController' , method: 'generateColumnPropertyByRunSql'}, // 通过执行SQL查询，获取反射字段列表
    generateDataDL: {controller: 'LowcodeDataSourceController' , method: 'generateDataDL'}, // 生成DDL
    generateTableDL: {controller: 'LowcodeDataSourceController' , method: 'generateTableDL'}, // 生成表DDL
    getDatasourceByEntityName: {controller: 'LowcodeDataSourceController' , method: 'getDatasourceByEntityName'}, // 查询指定实体所属数据源
    previewTableData: {controller: 'LowcodeDataSourceController' , method: 'previewTableData'}, // 预览数据库表中数据
    queryAppDataSources: {controller: 'LowcodeDataSourceController' , method: 'queryAppDataSources'}, // 查询指定项目数据源信息
    queryColumnsByTable: {controller: 'LowcodeDataSourceController' , method: 'queryColumnsByTable'}, // 查询指定数据表列信息
    queryDataSources: {controller: 'LowcodeDataSourceController' , method: 'queryDataSources'}, // 查询项目数据源信息
    queryTablesByDB: {controller: 'LowcodeDataSourceController' , method: 'queryTablesByDB'}, // 根据数据源查询默认数据表列表
    saveTableData: {controller: 'LowcodeDataSourceController' , method: 'saveTableData'}, // 编辑数据库表
};
 //Afcenter控制台管理
let RdcloudAfcManagerController = {
    __name: 'RdcloudAfcManagerController',
    queryEmployeeByAIRole: {controller: 'RdcloudAfcManagerController' , method: 'queryEmployeeByAIRole'}, // 获取所有拥有AI权限的用户
    queryMenusByCurrentUser: {controller: 'RdcloudAfcManagerController' , method: 'queryMenusByCurrentUser'}, // 根据当前登录用户的权限获取菜单列表
};
 //BI访问凭证获取
let BiApiTokenController = {
    __name: 'BiApiTokenController',
    getBIToken: {controller: 'BiApiTokenController' , method: 'getBIToken'}, // 通过应用编码查询BI凭证
};
 //GPT模型管理
let RdcloudConversationGptModelController = {
    __name: 'RdcloudConversationGptModelController',
    create: {controller: 'RdcloudConversationGptModelController' , method: 'create'}, // 创建模型
    deleteByIds: {controller: 'RdcloudConversationGptModelController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findRdcloudConversationGptModelByIdOrCode: {controller: 'RdcloudConversationGptModelController' , method: 'findRdcloudConversationGptModelByIdOrCode'}, // 根据id查询
    isExist: {controller: 'RdcloudConversationGptModelController' , method: 'isExist'}, // 校验code是否重复
    queryRdcloudConversationGptModels: {controller: 'RdcloudConversationGptModelController' , method: 'queryRdcloudConversationGptModels'}, // 查询模型列表
    update: {controller: 'RdcloudConversationGptModelController' , method: 'update'}, // 修改会话
};
 //GPT模板管理
let RdcloudTemplateController = {
    __name: 'RdcloudTemplateController',
    create: {controller: 'RdcloudTemplateController' , method: 'create'}, // 创建模板
    deleteByIds: {controller: 'RdcloudTemplateController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    generateContent: {controller: 'RdcloudTemplateController' , method: 'generateContent'}, // 根据模板生成内容
    getRdcloudTemplate: {controller: 'RdcloudTemplateController' , method: 'getRdcloudTemplate'}, // 查询指定模板
    queryRdcloudTemplatesWithPage: {controller: 'RdcloudTemplateController' , method: 'queryRdcloudTemplatesWithPage'}, // 查询模板列表
    update: {controller: 'RdcloudTemplateController' , method: 'update'}, // 更新模板
};
 //widget管理
let WidgetController = {
    __name: 'WidgetController',
    bindRoleWidgets: {controller: 'WidgetController' , method: 'bindRoleWidgets'}, // widget绑定角色
    create: {controller: 'WidgetController' , method: 'create'}, // 新增
    delete: {controller: 'WidgetController' , method: 'delete'}, // 删除(支持批量删除)
    existenceByCode: {controller: 'WidgetController' , method: 'existenceByCode'}, // 校验code是否存在
    getByCode: {controller: 'WidgetController' , method: 'getByCode'}, // 根据code or id查询
    getCurrentWeather: {controller: 'WidgetController' , method: 'getCurrentWeather'}, // 获取当前天气API
    queryByCurrentUser: {controller: 'WidgetController' , method: 'queryByCurrentUser'}, // 获取当前登录用户的widgets
    queryRolesByWidgetIdWithPage: {controller: 'WidgetController' , method: 'queryRolesByWidgetIdWithPage'}, // 分页查询widget绑定的角色列表
    queryWithPage: {controller: 'WidgetController' , method: 'queryWithPage'}, // 分页条件查询列表
    unbindRoleWidgets: {controller: 'WidgetController' , method: 'unbindRoleWidgets'}, // widget解绑角色
    update: {controller: 'WidgetController' , method: 'update'}, // 修改
    updateContent: {controller: 'WidgetController' , method: 'updateContent'}, // 修改内容(暂时不用)
};
 //业务对象管理
let BusinessObjectController = {
    __name: 'BusinessObjectController',
    create: {controller: 'BusinessObjectController' , method: 'create'}, // 新增业务对象
    deleteByIds: {controller: 'BusinessObjectController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findBusinessObject: {controller: 'BusinessObjectController' , method: 'findBusinessObject'}, // 根据id查询
    findBusinessObjectByCode: {controller: 'BusinessObjectController' , method: 'findBusinessObjectByCode'}, // 根据CODE查询
    isExist: {controller: 'BusinessObjectController' , method: 'isExist'}, // 校验code是否重复
    queryBusinessObjectsByCriteria: {controller: 'BusinessObjectController' , method: 'queryBusinessObjectsByCriteria'}, // 分页查询业务对象列表
    update: {controller: 'BusinessObjectController' , method: 'update'}, // 修改业务对象-基础信息
};
 //个人画像管理
let RdcloudPersonalizationController = {
    __name: 'RdcloudPersonalizationController',
    getRdcloudPersonalization: {controller: 'RdcloudPersonalizationController' , method: 'getRdcloudPersonalization'}, // 获取个人画像
};
 //会话管理
let RdcloudConversationController = {
    __name: 'RdcloudConversationController',
    create: {controller: 'RdcloudConversationController' , method: 'create'}, // 创建会话
    createContent: {controller: 'RdcloudConversationController' , method: 'createContent'}, // 创建会话内容(前端组织上下文)
    createContent4Template: {controller: 'RdcloudConversationController' , method: 'createContent4Template'}, // 创建会话内容(前端组织上下文)
    createContentWithContext: {controller: 'RdcloudConversationController' , method: 'createContentWithContext'}, // 创建会话内容
    deleteByIds: {controller: 'RdcloudConversationController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    queryRdConversationContents: {controller: 'RdcloudConversationController' , method: 'queryRdConversationContents'}, // 获取会话内容列表
    queryRdConversations: {controller: 'RdcloudConversationController' , method: 'queryRdConversations'}, // 查询会话列表
    update: {controller: 'RdcloudConversationController' , method: 'update'}, // 修改会话
    updateContent: {controller: 'RdcloudConversationController' , method: 'updateContent'}, // 更新会话内容(前端组织上下文)
    updateContentWithContext: {controller: 'RdcloudConversationController' , method: 'updateContentWithContext'}, // 更新会话内容
};
 //低开应用模板管理
let LowcodeAppTemplateController = {
    __name: 'LowcodeAppTemplateController',
    create: {controller: 'LowcodeAppTemplateController' , method: 'create'}, // 创建项目模板
    createByFile: {controller: 'LowcodeAppTemplateController' , method: 'createByFile'}, // 创建项目模板（根据上传文件创建）
    delete: {controller: 'LowcodeAppTemplateController' , method: 'delete'}, // 删除项目模板：支持批量删除
    disabled: {controller: 'LowcodeAppTemplateController' , method: 'disabled'}, // 状态设置：禁用
    existenceByCode: {controller: 'LowcodeAppTemplateController' , method: 'existenceByCode'}, // 校验code是否存在
    exportAppTemplate: {controller: 'LowcodeAppTemplateController' , method: 'exportAppTemplate'}, // 导出应用模板
    get: {controller: 'LowcodeAppTemplateController' , method: 'get'}, // 根据id或者code查询应用模板信息
    importTemplate: {controller: 'LowcodeAppTemplateController' , method: 'importTemplate'}, // 选择应用模板导入到指定应用中
    queryWithPage: {controller: 'LowcodeAppTemplateController' , method: 'queryWithPage'}, // 分页查询应用模板列表
    rename: {controller: 'LowcodeAppTemplateController' , method: 'rename'}, // 修改项目模板：只支持修改名称和描述
    startup: {controller: 'LowcodeAppTemplateController' , method: 'startup'}, // 状态设置：启用
};
 //功能码工具管理
let FunctionCodeToolsController = {
    __name: 'FunctionCodeToolsController',
    downloadResourceTemplate: {controller: 'FunctionCodeToolsController' , method: 'downloadResourceTemplate'}, // 应用资源模板下载
    exportAppResources: {controller: 'FunctionCodeToolsController' , method: 'exportAppResources'}, // 应用资源导出excel
    exportFunctionCodes: {controller: 'FunctionCodeToolsController' , method: 'exportFunctionCodes'}, // 功能码导出
    importAppResources: {controller: 'FunctionCodeToolsController' , method: 'importAppResources'}, // 应用资源导入
    importFromFile: {controller: 'FunctionCodeToolsController' , method: 'importFromFile'}, // 从文件导入(暂时不用)
    importFromUrl: {controller: 'FunctionCodeToolsController' , method: 'importFromUrl'}, // 从URL导入(暂时不用)
    importFunCodesFromFIleOrUrl: {controller: 'FunctionCodeToolsController' , method: 'importFunCodesFromFIleOrUrl'}, // 根据上传文件(优先)或者指定URL导入功能码(优先用这个接口)
    parseFunCodes: {controller: 'FunctionCodeToolsController' , method: 'parseFunCodes'}, // 根据上传文件(优先)或者指定URL解析功能码(老接口)
    parseFunCodesByFile: {controller: 'FunctionCodeToolsController' , method: 'parseFunCodesByFile'}, // 根据上传文件或指定资源类型解析功能码(新接口)
};
 //员工管理
let EmployeeController = {
    __name: 'EmployeeController',
    create: {controller: 'EmployeeController' , method: 'create'}, // 新增员工
    createRolesInEmployee: {controller: 'EmployeeController' , method: 'createRolesInEmployee'}, // 员工添加角色
    deleteRolesInEmployee: {controller: 'EmployeeController' , method: 'deleteRolesInEmployee'}, // 员工移除角色
    disableEmployee: {controller: 'EmployeeController' , method: 'disableEmployee'}, // 员工禁用
    enableEmployee: {controller: 'EmployeeController' , method: 'enableEmployee'}, // 员工可用
    findEmployeeById: {controller: 'EmployeeController' , method: 'findEmployeeById'}, // 根据ID查询员工信息
    findEmployeeIsExist: {controller: 'EmployeeController' , method: 'findEmployeeIsExist'}, // 校验是否存在员工code，true存在
    getOrgFullPathByEmployeeCode: {controller: 'EmployeeController' , method: 'getOrgFullPathByEmployeeCode'}, // 查询员工的机构路径
    queryEmployeeBySecretLevelAndFilter: {controller: 'EmployeeController' , method: 'queryEmployeeBySecretLevelAndFilter'}, // 通过保密级别过滤查询员工信息
    queryEmployeesByIds: {controller: 'EmployeeController' , method: 'queryEmployeesByIds'}, // 根据员工id获取员工集合
    queryEmployeesByIdsForMobile: {controller: 'EmployeeController' , method: 'queryEmployeesByIdsForMobile'}, // 移动端获取员工集合
    queryEmployeesByRoleCode: {controller: 'EmployeeController' , method: 'queryEmployeesByRoleCode'}, // 根据角色查询角色下的员工
    queryEmployeesByTenantId: {controller: 'EmployeeController' , method: 'queryEmployeesByTenantId'}, // 条件查询员工，分页展示
    queryEmployeesInSafetyWhitelist: {controller: 'EmployeeController' , method: 'queryEmployeesInSafetyWhitelist'}, // 查询租户下水印白名单员工
    queryRolesInEmployee: {controller: 'EmployeeController' , method: 'queryRolesInEmployee'}, // 根据员工ID查询员工角色
    queryUsersInEmployee: {controller: 'EmployeeController' , method: 'queryUsersInEmployee'}, // 根据员工ID查询用户信息
    update: {controller: 'EmployeeController' , method: 'update'}, // 修改员工信息
    updateSecretLevel: {controller: 'EmployeeController' , method: 'updateSecretLevel'}, // 修改员工保密级别
};
 //国际化处理器
let GeneralI18nController = {
    __name: 'GeneralI18nController',
    delete: {controller: 'GeneralI18nController' , method: 'delete'}, // 删除国际化信息(支持批量删除)
    downloadI18nTemplate: {controller: 'GeneralI18nController' , method: 'downloadI18nTemplate'}, // 国际化模板下载
    exportI18nMessages: {controller: 'GeneralI18nController' , method: 'exportI18nMessages'}, // 国际化信息导出
    importI18nMessages: {controller: 'GeneralI18nController' , method: 'importI18nMessages'}, // 国际化信息导入
    queryWithPage: {controller: 'GeneralI18nController' , method: 'queryWithPage'}, // 分页条件查询国际化信息列表
    save: {controller: 'GeneralI18nController' , method: 'save'}, // 保存国际化信息(支持批量)
};
 //在线用户管理
let OnlineUserController = {
    __name: 'OnlineUserController',
    clear: {controller: 'OnlineUserController' , method: 'clear'}, // 清除数据库中缓存里没有的在线用户
    create: {controller: 'OnlineUserController' , method: 'create'}, // 新增在线用户
    delete: {controller: 'OnlineUserController' , method: 'delete'}, // 删除在线用户根据id
    deleteByUniqueId: {controller: 'OnlineUserController' , method: 'deleteByUniqueId'}, // 删除在线用户根据uniqueId
    findOnlineUser: {controller: 'OnlineUserController' , method: 'findOnlineUser'}, // 根据id查在线用户
    logout: {controller: 'OnlineUserController' , method: 'logout'}, // 强制下线
    queryOnlineUser: {controller: 'OnlineUserController' , method: 'queryOnlineUser'}, // 条件查询在线用户
    queryOnlineUserWithPage: {controller: 'OnlineUserController' , method: 'queryOnlineUserWithPage'}, // 分页查询在线用户
    update: {controller: 'OnlineUserController' , method: 'update'}, // 修改在线用户
};
 //字典类型管理
let DictTypeController = {
    __name: 'DictTypeController',
    create: {controller: 'DictTypeController' , method: 'create'}, // 新增字典类型
    createBatchWithCascade: {controller: 'DictTypeController' , method: 'createBatchWithCascade'}, // 新增字典类型(批量保存-支持级联保存字典项)
    deleteByIds: {controller: 'DictTypeController' , method: 'deleteByIds'}, // 根据主键批量删除字典类型
    downloadDictTemplate: {controller: 'DictTypeController' , method: 'downloadDictTemplate'}, // 字典模板下载
    exportDictTypes: {controller: 'DictTypeController' , method: 'exportDictTypes'}, // 字典类型导出
    findDictTypeIsExist: {controller: 'DictTypeController' , method: 'findDictTypeIsExist'}, // 校验指定租户下是否存在字典类型编码或字典类型名称，true存在
    getDictTypeById: {controller: 'DictTypeController' , method: 'getDictTypeById'}, // 根据id查询字典类型
    importDict: {controller: 'DictTypeController' , method: 'importDict'}, // 字典导入
    queryDictTypesByCriteria: {controller: 'DictTypeController' , method: 'queryDictTypesByCriteria'}, // 条件查询字典类型,分页展示
    queryDictTypesByParentId: {controller: 'DictTypeController' , method: 'queryDictTypesByParentId'}, // 通过字典类型id查找字典类型子级列表
    update: {controller: 'DictTypeController' , method: 'update'}, // 修改字典类型
};
 //字典项管理
let DictEntryController = {
    __name: 'DictEntryController',
    create: {controller: 'DictEntryController' , method: 'create'}, // 新增字典项
    deleteByIds: {controller: 'DictEntryController' , method: 'deleteByIds'}, // 根据主键批量删除字典项
    findDictEntryIsExist: {controller: 'DictEntryController' , method: 'findDictEntryIsExist'}, // 校验是否存在字典项编码或字典项名称，true存在
    getDictEntityByCode: {controller: 'DictEntryController' , method: 'getDictEntityByCode'}, // 根据字典项CODE查询字典项
    getDictEntityById: {controller: 'DictEntryController' , method: 'getDictEntityById'}, // 根据字典项ID查询字典项
    queryDictEntrysByCriteria: {controller: 'DictEntryController' , method: 'queryDictEntrysByCriteria'}, // 条件查询字典项,分页展示
    queryDictEntrysByDictTypeId: {controller: 'DictEntryController' , method: 'queryDictEntrysByDictTypeId'}, // 通过字典类型ID查找字典项
    queryDictEntrysByDictTypeIds: {controller: 'DictEntryController' , method: 'queryDictEntrysByDictTypeIds'}, // 通过字典类型IDS批量查找字典项
    update: {controller: 'DictEntryController' , method: 'update'}, // 修改字典项
};
 //安全策略
let SafetyController = {
    __name: 'SafetyController',
    create: {controller: 'SafetyController' , method: 'create'}, // 新增密码策略
    getSafetySite: {controller: 'SafetyController' , method: 'getSafetySite'}, // 查询密码策略
    update: {controller: 'SafetyController' , method: 'update'}, // 修改密码策略
};
 //导入历史记录管理
let ImportHistoryController = {
    __name: 'ImportHistoryController',
    downloadImportLog: {controller: 'ImportHistoryController' , method: 'downloadImportLog'}, // 导入日志下载
    queryImportHistoriesByCriteria: {controller: 'ImportHistoryController' , method: 'queryImportHistoriesByCriteria'}, // 分页查询导入历史列表
};
 //导出管理
let RdcloudExportExcelController = {
    __name: 'RdcloudExportExcelController',
    exportExcel: {controller: 'RdcloudExportExcelController' , method: 'exportExcel'}, // 部门统计数据导出excel
};
 //岗位管理
let PositionController = {
    __name: 'PositionController',
    create: {controller: 'PositionController' , method: 'create'}, // 新增岗位
    createRolesInPosition: {controller: 'PositionController' , method: 'createRolesInPosition'}, // 岗位批量添加角色
    deleteByIds: {controller: 'PositionController' , method: 'deleteByIds'}, // 根据主键集合批量删除岗位
    deleteRolesInPosition: {controller: 'PositionController' , method: 'deleteRolesInPosition'}, // 岗位批量移除角色
    findPositionById: {controller: 'PositionController' , method: 'findPositionById'}, // 根据id查询岗位
    findPositionIsExist: {controller: 'PositionController' , method: 'findPositionIsExist'}, // 校验当前租户下是否存在岗位编码或岗位名称，true存在
    queryPositionByIds: {controller: 'PositionController' , method: 'queryPositionByIds'}, // 根据多个ID字符串查询岗位
    queryPositionTypes: {controller: 'PositionController' , method: 'queryPositionTypes'}, // 条件查询岗位类型,分页展示
    queryPositionsByCriteria: {controller: 'PositionController' , method: 'queryPositionsByCriteria'}, // 按条件查询岗位，分页展示
    queryRolesInPosition: {controller: 'PositionController' , method: 'queryRolesInPosition'}, // 查询岗位下的角色信息，分页展示
    update: {controller: 'PositionController' , method: 'update'}, // 修改岗位
};
 //工作日历任务管理
let WorkCalendarTaskController = {
    __name: 'WorkCalendarTaskController',
    create: {controller: 'WorkCalendarTaskController' , method: 'create'}, // 新增
    delete: {controller: 'WorkCalendarTaskController' , method: 'delete'}, // 删除(支持批量删除)
    getByCode: {controller: 'WorkCalendarTaskController' , method: 'getByCode'}, // 根据code or id查询
    getDailyTaskProgress: {controller: 'WorkCalendarTaskController' , method: 'getDailyTaskProgress'}, // 获取当天任务进度
    queryWithPage: {controller: 'WorkCalendarTaskController' , method: 'queryWithPage'}, // 分页条件查询列表
    update: {controller: 'WorkCalendarTaskController' , method: 'update'}, // 修改
};
 //工作组管理
let WorkGroupController = {
    __name: 'WorkGroupController',
    create: {controller: 'WorkGroupController' , method: 'create'}, // 新增工作组
    createEmployeesInWorkgroup: {controller: 'WorkGroupController' , method: 'createEmployeesInWorkgroup'}, // 批量添加工作组员工
    createRolesInWorkGroup: {controller: 'WorkGroupController' , method: 'createRolesInWorkGroup'}, // 工作组添加角色
    deleteByIds: {controller: 'WorkGroupController' , method: 'deleteByIds'}, // 根据主键集合批量删除工作组
    deleteEmployeesInWorkgroup: {controller: 'WorkGroupController' , method: 'deleteEmployeesInWorkgroup'}, // 批量删除工作组员工
    deleteRolesInWorkGroup: {controller: 'WorkGroupController' , method: 'deleteRolesInWorkGroup'}, // 工作组移除角色
    findWorkGroupById: {controller: 'WorkGroupController' , method: 'findWorkGroupById'}, // 根据主键查询工作组信息
    findWorkGroupIsExist: {controller: 'WorkGroupController' , method: 'findWorkGroupIsExist'}, // 校验当前租户下是否存在工作组编码或工作组名称，true存在
    queryEmployeesInWorkGroup: {controller: 'WorkGroupController' , method: 'queryEmployeesInWorkGroup'}, // 根据工作组ID条件查询工作组员工,分页展示
    queryRolesInWorkGroup: {controller: 'WorkGroupController' , method: 'queryRolesInWorkGroup'}, // 条件查询工作组下的角色
    queryWorkGroupsByCriteria: {controller: 'WorkGroupController' , method: 'queryWorkGroupsByCriteria'}, // 按条件查询工作组，分页，排序展示
    update: {controller: 'WorkGroupController' , method: 'update'}, // 修改工作组信息
};
 //工作通知管理
let WorkNoticeController = {
    __name: 'WorkNoticeController',
    create: {controller: 'WorkNoticeController' , method: 'create'}, // 新增
    delete: {controller: 'WorkNoticeController' , method: 'delete'}, // 删除(支持批量删除)
    getById: {controller: 'WorkNoticeController' , method: 'getById'}, // 根据id查询
    queryWithPage: {controller: 'WorkNoticeController' , method: 'queryWithPage'}, // 分页条件查询列表
    update: {controller: 'WorkNoticeController' , method: 'update'}, // 修改
};
 //常用语管理
let CommonInfoController = {
    __name: 'CommonInfoController',
    createCommonInfo: {controller: 'CommonInfoController' , method: 'createCommonInfo'}, // 新增常用语
    deleteCommonInfo: {controller: 'CommonInfoController' , method: 'deleteCommonInfo'}, // 根据主键id删除常用语
    findCommonInfo: {controller: 'CommonInfoController' , method: 'findCommonInfo'}, // 分页查询常用语
    updateCommonInfo: {controller: 'CommonInfoController' , method: 'updateCommonInfo'}, // 修改常用语
};
 //应用实体控制器
let GeneralModelController = {
    __name: 'GeneralModelController',
    queryDataSources: {controller: 'GeneralModelController' , method: 'queryDataSources'}, // 查询应用数据源列表
    queryPersistentEntitys: {controller: 'GeneralModelController' , method: 'queryPersistentEntitys'}, // 查询当前应用内运行时sdo
    queryWithPage: {controller: 'GeneralModelController' , method: 'queryWithPage'}, // 分页查询数据模型
};
 //应用管理
let AppController = {
    __name: 'AppController',
    countLowcodeResourceWithAppName: {controller: 'AppController' , method: 'countLowcodeResourceWithAppName'}, // 统计指定应用内各资源类型的数量
    create: {controller: 'AppController' , method: 'create'}, // 注册应用
    deleteByIds: {controller: 'AppController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findApp: {controller: 'AppController' , method: 'findApp'}, // 根据id查询
    findAppByIdOrCode: {controller: 'AppController' , method: 'findAppByIdOrCode'}, // 根据id或code查询
    isExist: {controller: 'AppController' , method: 'isExist'}, // 校验code是否重复
    queryAppsByCriteria: {controller: 'AppController' , method: 'queryAppsByCriteria'}, // 分页查询应用列表
    queryModelsWithPage: {controller: 'AppController' , method: 'queryModelsWithPage'}, // 分页查询数据模型
    queryPersistentEntitys: {controller: 'AppController' , method: 'queryPersistentEntitys'}, // /查询应用内运行时持久化实体
    queryWidgetAppsByCriteria: {controller: 'AppController' , method: 'queryWidgetAppsByCriteria'}, // 分页查询widget应用列表
    refreshSercet: {controller: 'AppController' , method: 'refreshSercet'}, // 刷新应用密钥
    syncApplicationBiFolder: {controller: 'AppController' , method: 'syncApplicationBiFolder'}, // 同步应用至iData平台
    update: {controller: 'AppController' , method: 'update'}, // 修改应用-基础信息
};
 //开发中心管理
let DevelopCenterController = {
    __name: 'DevelopCenterController',
    createApp: {controller: 'DevelopCenterController' , method: 'createApp'}, // 创建应用
    createRuntimeResource: {controller: 'DevelopCenterController' , method: 'createRuntimeResource'}, // 添加资源(包括操作系统和数据库)
    deleteApp: {controller: 'DevelopCenterController' , method: 'deleteApp'}, // 删除应用
    deleteRuntimeResource: {controller: 'DevelopCenterController' , method: 'deleteRuntimeResource'}, // 删除资源信息
    queryAppPorts: {controller: 'DevelopCenterController' , method: 'queryAppPorts'}, // 查询当前系统可用的应用端口列表
    queryRuntimeResourcesWithPage: {controller: 'DevelopCenterController' , method: 'queryRuntimeResourcesWithPage'}, // 分页查询运行资源列表(包括操作系统和数据库)
    reDeployApp: {controller: 'DevelopCenterController' , method: 'reDeployApp'}, // 重新部署应用(支持修改应用端口、资源等)
    rename: {controller: 'DevelopCenterController' , method: 'rename'}, // 修改应用基本信息(显示名称和描述、负责人等)
    showdownApp: {controller: 'DevelopCenterController' , method: 'showdownApp'}, // 停止应用
    startUpApp: {controller: 'DevelopCenterController' , method: 'startUpApp'}, // 启用应用
    testConnection: {controller: 'DevelopCenterController' , method: 'testConnection'}, // 数据资源连接测试
    updateRuntimeResource: {controller: 'DevelopCenterController' , method: 'updateRuntimeResource'}, // 修改资源信息
    verifyAddress: {controller: 'DevelopCenterController' , method: 'verifyAddress'}, // 校验资源ip、port可用性(true:已被占用;false:可用)
    verifyMemoryWithCreateApp: {controller: 'DevelopCenterController' , method: 'verifyMemoryWithCreateApp'}, // 创建应用时校验内存
};
 //授权管理
let AuthManagerController = {
    __name: 'AuthManagerController',
    delPartyAuth: {controller: 'AuthManagerController' , method: 'delPartyAuth'}, // 角色参与者解绑：支持批量
    delPartyAuthWithBusObjInst: {controller: 'AuthManagerController' , method: 'delPartyAuthWithBusObjInst'}, // 业务对象实例场景：删除授权(支持批量)
    handlePartyAuth: {controller: 'AuthManagerController' , method: 'handlePartyAuth'}, // 角色绑定参与者：支持批量
    handleRoleResource: {controller: 'AuthManagerController' , method: 'handleRoleResource'}, // 角色管理：角色-资源授权处理
    handleTransferRoleResources: {controller: 'AuthManagerController' , method: 'handleTransferRoleResources'}, // 权限调整：权限统一调整接口(转移+删除)
    queryMembersByObjIdWithPage: {controller: 'AuthManagerController' , method: 'queryMembersByObjIdWithPage'}, // 业务对象实例场景：分页查询角色成员列表
    queryMembersWithPage: {controller: 'AuthManagerController' , method: 'queryMembersWithPage'}, // 角色管理：分页查询角色成员列表
    queryPartysWithBusObjInst: {controller: 'AuthManagerController' , method: 'queryPartysWithBusObjInst'}, // 业务对象实例场景：查询业务对象实例所属参与者列表
    queryResGroupWithRole: {controller: 'AuthManagerController' , method: 'queryResGroupWithRole'}, // 角色管理：查询角色对应的全部资源(含资源分组数据)
    queryResourcesByRole: {controller: 'AuthManagerController' , method: 'queryResourcesByRole'}, // 角色管理：分页查询角色对应的全部资源(不含资源分组数据)
    queryRolesByPartyWithBusObjInst: {controller: 'AuthManagerController' , method: 'queryRolesByPartyWithBusObjInst'}, // 业务对象实例场景：查询参与者所属角色列表
    queryRolesByPartyWithPage: {controller: 'AuthManagerController' , method: 'queryRolesByPartyWithPage'}, // 参与者管理：根据参与者查询所拥有角色
};
 //操作日志管理
let OperationLogController = {
    __name: 'OperationLogController',
    exportOperationLogsForSys: {controller: 'OperationLogController' , method: 'exportOperationLogsForSys'}, // 根据条件导出日志平台级
    exportOperationLogsForTenant: {controller: 'OperationLogController' , method: 'exportOperationLogsForTenant'}, // 根据条件导出日志租户级
    findOperationLogDetail: {controller: 'OperationLogController' , method: 'findOperationLogDetail'}, // 根据ID查询日志详情
    findTenantOperationLogDetail: {controller: 'OperationLogController' , method: 'findTenantOperationLogDetail'}, // 根据ID查询租户日志详情
    logsToHistory: {controller: 'OperationLogController' , method: 'logsToHistory'}, // 日志转历史
    queryOperationLogForSys: {controller: 'OperationLogController' , method: 'queryOperationLogForSys'}, // 平台级根据条件查询操作日志
    queryOperationLogForTenant: {controller: 'OperationLogController' , method: 'queryOperationLogForTenant'}, // 租户级根据条件查询操作日志
};
 //机构管理
let OrgController = {
    __name: 'OrgController',
    create: {controller: 'OrgController' , method: 'create'}, // 新增机构
    createManagerInOrg: {controller: 'OrgController' , method: 'createManagerInOrg'}, // 设置机构管理员
    createResourceInOrg: {controller: 'OrgController' , method: 'createResourceInOrg'}, // 设置机构管理员管理的资源
    createRolesInOrg: {controller: 'OrgController' , method: 'createRolesInOrg'}, // 机构添加角色
    deleteByIds: {controller: 'OrgController' , method: 'deleteByIds'}, // 根据主键集合批量删除机构
    deleteEmployeeInOrg: {controller: 'OrgController' , method: 'deleteEmployeeInOrg'}, // 删除指定维度下机构的员工信息
    deleteEmployeesInOrg: {controller: 'OrgController' , method: 'deleteEmployeesInOrg'}, // 机构下的指定员工删除岗位
    deleteManagerInOrg: {controller: 'OrgController' , method: 'deleteManagerInOrg'}, // 删除机构管理员
    deleteResourceInOrg: {controller: 'OrgController' , method: 'deleteResourceInOrg'}, // 删除机构某个管理员管理的资源
    deleteRolesInOrg: {controller: 'OrgController' , method: 'deleteRolesInOrg'}, // 机构移除角色
    disableOrg: {controller: 'OrgController' , method: 'disableOrg'}, // 机构禁用
    empUpload: {controller: 'OrgController' , method: 'empUpload'}, // 人员导入
    enableOrg: {controller: 'OrgController' , method: 'enableOrg'}, // 机构启用
    exportEmp: {controller: 'OrgController' , method: 'exportEmp'}, // 人员导出
    exportEmpModel: {controller: 'OrgController' , method: 'exportEmpModel'}, // 人员模板导出
    exportOrg: {controller: 'OrgController' , method: 'exportOrg'}, // 导出机构
    exportOrgModel: {controller: 'OrgController' , method: 'exportOrgModel'}, // 导出机构模板
    findMainOrgByEmployeeCode: {controller: 'OrgController' , method: 'findMainOrgByEmployeeCode'}, // 根据员工编码查询指定维度(默认主维度)下的所属主机构
    findOrgByEmployeeCode: {controller: 'OrgController' , method: 'findOrgByEmployeeCode'}, // 根据员工编码查询指定维度(默认主维度)下的所属机构
    findOrgById: {controller: 'OrgController' , method: 'findOrgById'}, // 根据id查询机构
    findOrgIsExist: {controller: 'OrgController' , method: 'findOrgIsExist'}, // 校验当前租户下是否存在机构code，true存在
    orgUpload: {controller: 'OrgController' , method: 'orgUpload'}, // 机构导入
    queryAllEmployees: {controller: 'OrgController' , method: 'queryAllEmployees'}, // 条件查询维度下所有员工，分页展示
    queryAllOrgsToTree: {controller: 'OrgController' , method: 'queryAllOrgsToTree'}, // 按条件查询机构，分页展示(树)，机构管理员过滤
    queryChildOrgsWithPage: {controller: 'OrgController' , method: 'queryChildOrgsWithPage'}, // 条件查询出直属子机构列表,分页展示,排序
    queryEmpExports: {controller: 'OrgController' , method: 'queryEmpExports'}, // 查询人员导出列表
    queryEmployeesInOrg: {controller: 'OrgController' , method: 'queryEmployeesInOrg'}, // 根据机构ID查询机构下的员工信息,分页展示
    queryEmployeesInOrgs: {controller: 'OrgController' , method: 'queryEmployeesInOrgs'}, // 根据机构查询机构下的员工信息,分页展示
    queryManagerInOrg: {controller: 'OrgController' , method: 'queryManagerInOrg'}, // 条件查询分级授权(二级管理员)信息
    queryOrgByIds: {controller: 'OrgController' , method: 'queryOrgByIds'}, // 根据集合查询机构
    queryOrgsByCriteria: {controller: 'OrgController' , method: 'queryOrgsByCriteria'}, // 条件查询机构信息
    queryOrgsWithPage: {controller: 'OrgController' , method: 'queryOrgsWithPage'}, // 条件查询所有机构信息
    queryPositionsInOrg: {controller: 'OrgController' , method: 'queryPositionsInOrg'}, // 查询机构下员工的岗位信息,分页展示
    queryPositionsToTree: {controller: 'OrgController' , method: 'queryPositionsToTree'}, // 按条件查询岗位，分页展示(树),机构管理员过滤
    queryResourceInOrg: {controller: 'OrgController' , method: 'queryResourceInOrg'}, // 查询机构管理员管理的资源
    queryRolesInOrg: {controller: 'OrgController' , method: 'queryRolesInOrg'}, // 查询机构下的角色,分页展示
    queryRolesToTree: {controller: 'OrgController' , method: 'queryRolesToTree'}, // 按条件查询角色，分页展示(树),机构管理员过滤
    queryUsersByOrgId: {controller: 'OrgController' , method: 'queryUsersByOrgId'}, // 根据机构ID查询机构下的用户信息,分页展示
    switchMainPositionInOrg: {controller: 'OrgController' , method: 'switchMainPositionInOrg'}, // 机构下的指定员工切换主岗位
    update: {controller: 'OrgController' , method: 'update'}, // 修改机构信息
    updatePositionsInOrg: {controller: 'OrgController' , method: 'updatePositionsInOrg'}, // 机构下的指定员工添加岗位
};
 //水印管理
let WaterMarkController = {
    __name: 'WaterMarkController',
    create: {controller: 'WaterMarkController' , method: 'create'}, // 创建水印
    findWaterMark: {controller: 'WaterMarkController' , method: 'findWaterMark'}, // 根据id查询
    update: {controller: 'WaterMarkController' , method: 'update'}, // 修改水印
};
 //用户统计分析管理
let RdcloudConversationUserStatisticsController = {
    __name: 'RdcloudConversationUserStatisticsController',
    queryUserStatistics: {controller: 'RdcloudConversationUserStatisticsController' , method: 'queryUserStatistics'}, // 获取单个用户统计分析
};
 //登录管理
let LoginManagerController = {
    __name: 'LoginManagerController',
    authenticateThirdPartyUsers: {controller: 'LoginManagerController' , method: 'authenticateThirdPartyUsers'}, // 通过第三方授权码登录
    getCaptchaBase64: {controller: 'LoginManagerController' , method: 'getCaptchaBase64'}, // 获取验证码
    getMobileRedirectThirdAuthUrl: {controller: 'LoginManagerController' , method: 'getMobileRedirectThirdAuthUrl'}, // 获取第三方认证服务地址
    getPasswordKey: {controller: 'LoginManagerController' , method: 'getPasswordKey'}, // 获取加密公钥
    getRedirectThirdAuthUrl: {controller: 'LoginManagerController' , method: 'getRedirectThirdAuthUrl'}, // 获取第三方认证服务地址
    getRedirectThirdQrUrl: {controller: 'LoginManagerController' , method: 'getRedirectThirdQrUrl'}, // 获取第三方扫码登录服务地址
    login: {controller: 'LoginManagerController' , method: 'login'}, // 登录
    loginWithAppSercet: {controller: 'LoginManagerController' , method: 'loginWithAppSercet'}, // 通过clientId和secret进行认证
    logout: {controller: 'LoginManagerController' , method: 'logout'}, // 注销
    refreshUserObject: {controller: 'LoginManagerController' , method: 'refreshUserObject'}, // 刷新UserObject
    request: {controller: 'LoginManagerController' , method: 'request'}, // 认证中心统一处理接口
    request: {controller: 'LoginManagerController' , method: 'request'}, // 认证中心统一处理接口
    request: {controller: 'LoginManagerController' , method: 'request'}, // 认证中心统一处理接口
    request: {controller: 'LoginManagerController' , method: 'request'}, // 认证中心统一处理接口
    requestHEAD: {controller: 'LoginManagerController' , method: 'requestHEAD'}, // 认证中心统一处理接口
    requestOPTIONS: {controller: 'LoginManagerController' , method: 'requestOPTIONS'}, // 认证中心统一处理接口
    requestPATCH: {controller: 'LoginManagerController' , method: 'requestPATCH'}, // 认证中心统一处理接口
    webAuthenticateThirdPartyUsers: {controller: 'LoginManagerController' , method: 'webAuthenticateThirdPartyUsers'}, // 网页内第三方授权码登录
};
 //白名单
let SafetyWhitelistController = {
    __name: 'SafetyWhitelistController',
    create: {controller: 'SafetyWhitelistController' , method: 'create'}, // 添加白名单员工
    createWaterMarkSafetyWhite: {controller: 'SafetyWhitelistController' , method: 'createWaterMarkSafetyWhite'}, // 添加水印白名单员工
    deleteByEmployeeIds: {controller: 'SafetyWhitelistController' , method: 'deleteByEmployeeIds'}, // 删除水印白名单员工
    deleteByIds: {controller: 'SafetyWhitelistController' , method: 'deleteByIds'}, // 删除白名单员工
    deleteSafetyByEmployeeIds: {controller: 'SafetyWhitelistController' , method: 'deleteSafetyByEmployeeIds'}, // 删除密码策略白名单人员
    querySafetyWhitelist: {controller: 'SafetyWhitelistController' , method: 'querySafetyWhitelist'}, // 查询租户下白名单
};
 //租户升级管理
let TenantUpgradeController = {
    __name: 'TenantUpgradeController',
    queryTenantUpgradeTemplateData: {controller: 'TenantUpgradeController' , method: 'queryTenantUpgradeTemplateData'}, // 查看更新部分模板数据
    updateTenantTemplateData: {controller: 'TenantUpgradeController' , method: 'updateTenantTemplateData'}, // 升级资源更新模板数据
};
 //租户管理
let TenantController = {
    __name: 'TenantController',
    create: {controller: 'TenantController' , method: 'create'}, // 新增租户
    disable: {controller: 'TenantController' , method: 'disable'}, // 禁用租户
    enable: {controller: 'TenantController' , method: 'enable'}, // 启用租户
    findTenant: {controller: 'TenantController' , method: 'findTenant'}, // 根据id查询租户
    findTenantByIds: {controller: 'TenantController' , method: 'findTenantByIds'}, // 根据ID集合查询租户
    isExist: {controller: 'TenantController' , method: 'isExist'}, // 根据name和code校验租户
    queryTenantsByCriteria: {controller: 'TenantController' , method: 'queryTenantsByCriteria'}, // 根据条件查询租户
    update: {controller: 'TenantController' , method: 'update'}, // 更新租户
};
 //站内信管理
let StationMessageController = {
    __name: 'StationMessageController',
    create: {controller: 'StationMessageController' , method: 'create'}, // 创建站内信
    deleteBatch: {controller: 'StationMessageController' , method: 'deleteBatch'}, // 批量删除站内信
    haveRead: {controller: 'StationMessageController' , method: 'haveRead'}, // 修改待阅状态为已阅
    queryPersonalStationMessagesByCriteria: {controller: 'StationMessageController' , method: 'queryPersonalStationMessagesByCriteria'}, // 条件查询人员站内信列表
    queryPersonalUnreadStationMessages: {controller: 'StationMessageController' , method: 'queryPersonalUnreadStationMessages'}, // 查询当前用户未读消息数量
    queryStationMessageDetailById: {controller: 'StationMessageController' , method: 'queryStationMessageDetailById'}, // 查询单个站内信详情
};
 //系统变量
let SysVariableController = {
    __name: 'SysVariableController',
    create: {controller: 'SysVariableController' , method: 'create'}, // 新增系统变量
    deleteByIds: {controller: 'SysVariableController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findSystemVariable: {controller: 'SysVariableController' , method: 'findSystemVariable'}, // 根据id查询
    getDevopsDefaultApp: {controller: 'SysVariableController' , method: 'getDevopsDefaultApp'}, // 查询默认的app占用内存大小
    isExist: {controller: 'SysVariableController' , method: 'isExist'}, // 校验code是否重复
    isNameExist: {controller: 'SysVariableController' , method: 'isNameExist'}, // 校验name是否重复
    querySystemVariablesByCriteria: {controller: 'SysVariableController' , method: 'querySystemVariablesByCriteria'}, // 分页查询系统变量列表
    replaceWithSystemVariables: {controller: 'SysVariableController' , method: 'replaceWithSystemVariables'}, // 转换系统变量
    update: {controller: 'SysVariableController' , method: 'update'}, // 修改系统变量-基础信息
};
 //素材库分组管理
let MaterialGroupController = {
    __name: 'MaterialGroupController',
    create: {controller: 'MaterialGroupController' , method: 'create'}, // 新增素材库分组
    delete: {controller: 'MaterialGroupController' , method: 'delete'}, // 删除素材库分组
    findMaterialGroupById: {controller: 'MaterialGroupController' , method: 'findMaterialGroupById'}, // 根据主键查询
    isExistByCode: {controller: 'MaterialGroupController' , method: 'isExistByCode'}, // 校验Code是否存在
    queryMaterialGroupWithPage: {controller: 'MaterialGroupController' , method: 'queryMaterialGroupWithPage'}, // 分页条件查询
    update: {controller: 'MaterialGroupController' , method: 'update'}, // 修改素材库分组
};
 //素材库管理
let SourceMaterialController = {
    __name: 'SourceMaterialController',
    create: {controller: 'SourceMaterialController' , method: 'create'}, // 新增素材
    delete: {controller: 'SourceMaterialController' , method: 'delete'}, // 删除素材
    deleteBtCode: {controller: 'SourceMaterialController' , method: 'deleteBtCode'}, // 根据Code删除素材
    downloadFontIcon: {controller: 'SourceMaterialController' , method: 'downloadFontIcon'}, // 下载字体图标
    downloadSvgFontIcon: {controller: 'SourceMaterialController' , method: 'downloadSvgFontIcon'}, // 根据Code展示图标
    exportMaterials: {controller: 'SourceMaterialController' , method: 'exportMaterials'}, // 素材库资源导出
    findSourceMaterialByCode: {controller: 'SourceMaterialController' , method: 'findSourceMaterialByCode'}, // 根据Code查询
    findSourceMaterialById: {controller: 'SourceMaterialController' , method: 'findSourceMaterialById'}, // 根据主键查询
    getCssFile: {controller: 'SourceMaterialController' , method: 'getCssFile'}, // 获取css文件
    getEotFile: {controller: 'SourceMaterialController' , method: 'getEotFile'}, // 获取eot文件
    getMd5: {controller: 'SourceMaterialController' , method: 'getMd5'}, // 获取素材CODE
    getSvgFile: {controller: 'SourceMaterialController' , method: 'getSvgFile'}, // 获取svg文件
    getTtfFile: {controller: 'SourceMaterialController' , method: 'getTtfFile'}, // 获取ttf文件
    getWoff2File: {controller: 'SourceMaterialController' , method: 'getWoff2File'}, // 获取woff2文件
    getWoffFile: {controller: 'SourceMaterialController' , method: 'getWoffFile'}, // 获取woff文件
    importMaterials: {controller: 'SourceMaterialController' , method: 'importMaterials'}, // 素材库资源导入
    isExistByCode: {controller: 'SourceMaterialController' , method: 'isExistByCode'}, // 校验Code是否存在
    isExistByName: {controller: 'SourceMaterialController' , method: 'isExistByName'}, // 根据名称校验是否存在
    querySourceMaterialByCriteria: {controller: 'SourceMaterialController' , method: 'querySourceMaterialByCriteria'}, // 条件查询
    querySourceMaterialWithPage: {controller: 'SourceMaterialController' , method: 'querySourceMaterialWithPage'}, // 分页条件查询
    update: {controller: 'SourceMaterialController' , method: 'update'}, // 修改素材
    updateByCode: {controller: 'SourceMaterialController' , method: 'updateByCode'}, // 根据Code修改素材
    uploadMaterial: {controller: 'SourceMaterialController' , method: 'uploadMaterial'}, // 素材上传
};
 //组件中心管理
let ComponentCenterController = {
    __name: 'ComponentCenterController',
    deletes: {controller: 'ComponentCenterController' , method: 'deletes'}, // 按主键删除组件分组(支持批量删除)
    download: {controller: 'ComponentCenterController' , method: 'download'}, // 下载组件库包
    existenceByCode: {controller: 'ComponentCenterController' , method: 'existenceByCode'}, // 校验code是否存在
    export: {controller: 'ComponentCenterController' , method: 'export'}, // 导出组件库
    get: {controller: 'ComponentCenterController' , method: 'get'}, // 按id或者code查询当前正在使用的组件库信息
    importComponents: {controller: 'ComponentCenterController' , method: 'importComponents'}, // 导入组件库
    queryWithPage: {controller: 'ComponentCenterController' , method: 'queryWithPage'}, // 分页查询组件库列表
    updateBasicInfo: {controller: 'ComponentCenterController' , method: 'updateBasicInfo'}, // 修改基本信息
    upload: {controller: 'ComponentCenterController' , method: 'upload'}, // 上传组件库zip包
};
 //组件管理
let LowcodeComponentResourceController = {
    __name: 'LowcodeComponentResourceController',
    getStaticResource: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource'}, // 获取资源:一级目录
    getStaticResource10: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource10'}, // 获取资源：十级目录
    getStaticResource2: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource2'}, // 获取资源：二级目录
    getStaticResource3: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource3'}, // 获取资源：三级目录
    getStaticResource4: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource4'}, // 获取资源：四级目录
    getStaticResource5: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource5'}, // 获取资源：五级目录
    getStaticResource6: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource6'}, // 获取资源：六级目录
    getStaticResource7: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource7'}, // 获取资源：七级目录
    getStaticResource8: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource8'}, // 获取资源：八级目录
    getStaticResource9: {controller: 'LowcodeComponentResourceController' , method: 'getStaticResource9'}, // 获取资源：九级目录
};
 //组织权限中心首页管理
let OrgAuthorityCenterController = {
    __name: 'OrgAuthorityCenterController',
    queryTenantStatistics: {controller: 'OrgAuthorityCenterController' , method: 'queryTenantStatistics'}, // 获取租户下的相关统计
};
 //维度管理
let DimensionController = {
    __name: 'DimensionController',
    create: {controller: 'DimensionController' , method: 'create'}, // 新增维度
    deleteByIds: {controller: 'DimensionController' , method: 'deleteByIds'}, // 根据主键集合批量删除维度
    findDimensionIsExist: {controller: 'DimensionController' , method: 'findDimensionIsExist'}, // 校验当前租户下是否存在维度code或维度名称，true存在
    getDimensionByCode: {controller: 'DimensionController' , method: 'getDimensionByCode'}, // 根据code查询维度
    getDimensionById: {controller: 'DimensionController' , method: 'getDimensionById'}, // 根据id查询维度
    queryDimensionsWithPage: {controller: 'DimensionController' , method: 'queryDimensionsWithPage'}, // 条件查询维度列表,分页展示,排序
    update: {controller: 'DimensionController' , method: 'update'}, // 修改维度信息
};
 //菜单使用记录
let MenuUsageRecordController = {
    __name: 'MenuUsageRecordController',
    create: {controller: 'MenuUsageRecordController' , method: 'create'}, // 新增/修改菜单使用记录
    queryCommonMenusByCurrentUser: {controller: 'MenuUsageRecordController' , method: 'queryCommonMenusByCurrentUser'}, // 查询经常当前登陆人常用菜单
};
 //菜单管理
let MenuController = {
    __name: 'MenuController',
    create: {controller: 'MenuController' , method: 'create'}, // 新增菜单
    createMenuWithLowForm: {controller: 'MenuController' , method: 'createMenuWithLowForm'}, // IDE内使用低开表单创建菜单
    deleteByIds: {controller: 'MenuController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findMenu: {controller: 'MenuController' , method: 'findMenu'}, // 根据id查询
    isExist: {controller: 'MenuController' , method: 'isExist'}, // 校验code是否重复
    queryFunctionCodesByBusinessObj: {controller: 'MenuController' , method: 'queryFunctionCodesByBusinessObj'}, // 查询业务对象实例中当前登录用户功能码
    queryMenusByAppName: {controller: 'MenuController' , method: 'queryMenusByAppName'}, // 根据当前登录用户的权限获取应用菜单列表(应用菜单)
    queryMenusByBusinessObjId: {controller: 'MenuController' , method: 'queryMenusByBusinessObjId'}, // 根据当前业务对象实例获取菜单列表
    queryMenusByCriteria: {controller: 'MenuController' , method: 'queryMenusByCriteria'}, // 分页查询菜单列表
    queryMenusByCurrentUser: {controller: 'MenuController' , method: 'queryMenusByCurrentUser'}, // 根据当前登录用户的权限获取菜单列表
    update: {controller: 'MenuController' , method: 'update'}, // 修改菜单-基础信息
    updateMenuBatch: {controller: 'MenuController' , method: 'updateMenuBatch'}, // 批量修改菜单
    updateParentId: {controller: 'MenuController' , method: 'updateParentId'}, // 批量调整菜单
};
 //角色管理
let RoleController = {
    __name: 'RoleController',
    create: {controller: 'RoleController' , method: 'create'}, // 新增角色
    deleteByIds: {controller: 'RoleController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body),单个删除和批量删除复用一个接口
    existenceByCode: {controller: 'RoleController' , method: 'existenceByCode'}, // 校验code是否存在
    findRoleById: {controller: 'RoleController' , method: 'findRoleById'}, // 根据主键查询
    queryAppRolesWithPage: {controller: 'RoleController' , method: 'queryAppRolesWithPage'}, // 分页查询role列表(应用管理)
    queryRoleByIds: {controller: 'RoleController' , method: 'queryRoleByIds'}, // 选人组件根据数组查询角色
    queryRolesWithPage: {controller: 'RoleController' , method: 'queryRolesWithPage'}, // 分页查询role列表
    update: {controller: 'RoleController' , method: 'update'}, // 修改角色-基础信息
};
 //访问凭证管理
let AfcApiTokenController = {
    __name: 'AfcApiTokenController',
    create: {controller: 'AfcApiTokenController' , method: 'create'}, // 创建token
    delete: {controller: 'AfcApiTokenController' , method: 'delete'}, // 删除token
    deleteBatch: {controller: 'AfcApiTokenController' , method: 'deleteBatch'}, // 批量删除token
    deleteCache: {controller: 'AfcApiTokenController' , method: 'deleteCache'}, // 清除指定用户缓存
    findById: {controller: 'AfcApiTokenController' , method: 'findById'}, // 通过id查询token
    findByToken: {controller: 'AfcApiTokenController' , method: 'findByToken'}, // 通过token查询api-token
    queryTokens: {controller: 'AfcApiTokenController' , method: 'queryTokens'}, // 查询所有token
    queryUserTokens: {controller: 'AfcApiTokenController' , method: 'queryUserTokens'}, // 查询指定用户的所有token
    update: {controller: 'AfcApiTokenController' , method: 'update'}, // 更新Token失效时间和备注
};
 //账号管理
let UserController = {
    __name: 'UserController',
    checkPassword: {controller: 'UserController' , method: 'checkPassword'}, // 校验密码格式
    create: {controller: 'UserController' , method: 'create'}, // 新增账号
    createRolesInUser: {controller: 'UserController' , method: 'createRolesInUser'}, // 根据账号添加角色
    deleteByIds: {controller: 'UserController' , method: 'deleteByIds'}, // 根据主键批量删除
    deleteRolesInUser: {controller: 'UserController' , method: 'deleteRolesInUser'}, // 账号移除角色
    disableEmployee: {controller: 'UserController' , method: 'disableEmployee'}, // 账号禁用
    enableEmployee: {controller: 'UserController' , method: 'enableEmployee'}, // 账号启用
    findUserById: {controller: 'UserController' , method: 'findUserById'}, // 根据ID查询账号信息
    findUserIsExist: {controller: 'UserController' , method: 'findUserIsExist'}, // 校验是否存在账号code，true存在
    initPassword: {controller: 'UserController' , method: 'initPassword'}, // 重置密码
    queryRolesInUser: {controller: 'UserController' , method: 'queryRolesInUser'}, // 根据账号ID查询账号下的角色
    queryUsers: {controller: 'UserController' , method: 'queryUsers'}, // 条件查询账号，分页展示
    safetyPassword: {controller: 'UserController' , method: 'safetyPassword'}, // 密码安全策略校验
    unparkUser: {controller: 'UserController' , method: 'unparkUser'}, // 账号解锁
    update: {controller: 'UserController' , method: 'update'}, // 修改账号信息
    updatePassword: {controller: 'UserController' , method: 'updatePassword'}, // 修改密码
};
 //资源代理管理
let ResourceProxyController = {
    __name: 'ResourceProxyController',
    createResource: {controller: 'ResourceProxyController' , method: 'createResource'}, // 创建资源信息
    findMenuByCode: {controller: 'ResourceProxyController' , method: 'findMenuByCode'}, // 根据菜单code查询菜单信息
    findResourceByCode: {controller: 'ResourceProxyController' , method: 'findResourceByCode'}, // 根据资源code查询资源信息
};
 //资源分组代理管理
let ResGroupProxyController = {
    __name: 'ResGroupProxyController',
    create: {controller: 'ResGroupProxyController' , method: 'create'}, // 创建资源分组信息
    findResGroup: {controller: 'ResGroupProxyController' , method: 'findResGroup'}, // 根据id查找资源分组信息
    findResGroupByCodeAndTenantId: {controller: 'ResGroupProxyController' , method: 'findResGroupByCodeAndTenantId'}, // 根据分组编码与租户编号查找资源分组信息
    queryResGroupsByAppId: {controller: 'ResGroupProxyController' , method: 'queryResGroupsByAppId'}, // 根据应用编号查找资源分组信息
    queryResGroupsByCriteria: {controller: 'ResGroupProxyController' , method: 'queryResGroupsByCriteria'}, // 分页查找资源分组信息
    queryResGroupsByTenantId: {controller: 'ResGroupProxyController' , method: 'queryResGroupsByTenantId'}, // 根据租户编号查找资源分组信息
};
 //资源分组管理
let ResGroupController = {
    __name: 'ResGroupController',
    create: {controller: 'ResGroupController' , method: 'create'}, // 新增资源分组
    deleteByIds: {controller: 'ResGroupController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findResGroup: {controller: 'ResGroupController' , method: 'findResGroup'}, // 根据id查询
    isExist: {controller: 'ResGroupController' , method: 'isExist'}, // 校验code是否重复
    queryResGroupsByCriteria: {controller: 'ResGroupController' , method: 'queryResGroupsByCriteria'}, // 分页查询资源分组列表
    update: {controller: 'ResGroupController' , method: 'update'}, // 修改资源分组-基础信息
};
 //资源扫描
let ActuatorController = {
    __name: 'ActuatorController',
    getActuatorMappings: {controller: 'ActuatorController' , method: 'getActuatorMappings'}, // 获取java方法与功能码资源的关系表
    queryAppHealth: {controller: 'ActuatorController' , method: 'queryAppHealth'}, // 查询指定应用的健康检测信息
    queryAppIsEnable: {controller: 'ActuatorController' , method: 'queryAppIsEnable'}, // 查询当前应用状态是否可用
    resourceLoader: {controller: 'ActuatorController' , method: 'resourceLoader'}, // 通过指定资源uri获取资源信息
};
 //资源管理
let ResourceController = {
    __name: 'ResourceController',
    create: {controller: 'ResourceController' , method: 'create'}, // 新增资源
    deleteByIds: {controller: 'ResourceController' , method: 'deleteByIds'}, // 按主键集合删除(参数放body)
    findResource: {controller: 'ResourceController' , method: 'findResource'}, // 根据id查询
    isExist: {controller: 'ResourceController' , method: 'isExist'}, // 校验code是否重复
    queryFunctionCodesByCurrentUser: {controller: 'ResourceController' , method: 'queryFunctionCodesByCurrentUser'}, // 查询当前登录用户功能码
    queryFunctionCodesByCurrentUserWithAppId: {controller: 'ResourceController' , method: 'queryFunctionCodesByCurrentUserWithAppId'}, // 查询当前登录用户应用功能码(应用功能码)
    queryResourcesByCriteria: {controller: 'ResourceController' , method: 'queryResourcesByCriteria'}, // 分页查询资源列表
    queryUrlResources: {controller: 'ResourceController' , method: 'queryUrlResources'}, // 查找url资源列表
    update: {controller: 'ResourceController' , method: 'update'}, // 修改资源-基础信息
    updateBiResourceContent: {controller: 'ResourceController' , method: 'updateBiResourceContent'}, // 同步修改BI资源ID
    updateTypes: {controller: 'ResourceController' , method: 'updateTypes'}, // 批量修改资源分类
};
 //选人组件管理
let SelectionComponentController = {
    __name: 'SelectionComponentController',
    queryChildByParentId: {controller: 'SelectionComponentController' , method: 'queryChildByParentId'}, // 根据机构id查出子机构
    queryEmployee: {controller: 'SelectionComponentController' , method: 'queryEmployee'}, // 条件查询员工
    queryEmployeeByOrg: {controller: 'SelectionComponentController' , method: 'queryEmployeeByOrg'}, // 根据机构id查询出当前机构下所有员工
    queryEmployeeForDepartment: {controller: 'SelectionComponentController' , method: 'queryEmployeeForDepartment'}, // 部门根据条件查询员工，根据登录用户判断是租户管理员或者机构管理员
    queryEmployeeForOrg: {controller: 'SelectionComponentController' , method: 'queryEmployeeForOrg'}, // 机构根据条件查询员工，根据登录用户判断是租户管理员或者机构管理员
    queryEmployeeInOrg: {controller: 'SelectionComponentController' , method: 'queryEmployeeInOrg'}, // 查询同部门下的员工
    queryEmployees: {controller: 'SelectionComponentController' , method: 'queryEmployees'}, // 员工多选，根据根节点机构id
    queryOrg: {controller: 'SelectionComponentController' , method: 'queryOrg'}, // 查询一级机构，根据登录用户判断租户管理员或者机构管理员
    queryOrgFullPath: {controller: 'SelectionComponentController' , method: 'queryOrgFullPath'}, // 查询机构的全路径
    queryUser: {controller: 'SelectionComponentController' , method: 'queryUser'}, // 条件查询账号
};
 //部门统计分析管理
let RdcloudConversationOrgStatisticsController = {
    __name: 'RdcloudConversationOrgStatisticsController',
    findOrgTree: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'findOrgTree'}, // 获取组织机构树
    getChildrenOrgs: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'getChildrenOrgs'}, // 获取子机构列表
    getHeatMap: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'getHeatMap'}, // 获取单个部门热力图(只有一级、二级部门[orgLever&#x3D;2/3]有此表)
    getSumStatistics: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'getSumStatistics'}, // 获取单个部门统计总数(只有一级、二级部门[orgLever&#x3D;2/3]有此表)
    queryOrgStatistics: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'queryOrgStatistics'}, // 获取单个部门统计分析(只有一级、二级部门[orgLever&#x3D;2/3]有此表)
    queryOrgStatistics4GptModel: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'queryOrgStatistics4GptModel'}, // 获取部门下的GPT模型饼图分析(只有一级、二级部门[orgLever&#x3D;2/3]下有此表)
    queryOrgStatisticsByOrg: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'queryOrgStatisticsByOrg'}, // 获取父部门下子部门的排名分析(只有一级部门[orgLever&#x3D;2]下有此表)
    queryUserStatisticsByOrg: {controller: 'RdcloudConversationOrgStatisticsController' , method: 'queryUserStatisticsByOrg'}, // 获取部门下所有用户排名分析(只有一级、二级部门[orgLever&#x3D;2/3]下有此表)
};
 //门户管理
let PortalController = {
    __name: 'PortalController',
    bindRoleWidgets: {controller: 'PortalController' , method: 'bindRoleWidgets'}, // portal绑定角色
    createWithPrivate: {controller: 'PortalController' , method: 'createWithPrivate'}, // 新建(用户)
    createWithPublic: {controller: 'PortalController' , method: 'createWithPublic'}, // 新建(管理员)
    deleteWithPrivate: {controller: 'PortalController' , method: 'deleteWithPrivate'}, // 删除、批量删除(用户)
    deleteWithPublic: {controller: 'PortalController' , method: 'deleteWithPublic'}, // 删除、批量删除(管理员)
    existenceByCode: {controller: 'PortalController' , method: 'existenceByCode'}, // 校验code是否存在(公共接口)
    getByCodeWithPrivate: {controller: 'PortalController' , method: 'getByCodeWithPrivate'}, // 根据code or id查询(用户)
    getByCodeWithPublic: {controller: 'PortalController' , method: 'getByCodeWithPublic'}, // 根据code or id查询(管理员)
    queryByCurrentUser: {controller: 'PortalController' , method: 'queryByCurrentUser'}, // 获取当前登录用户的portals(公共接口)
    queryRolesByPortalIdWithPage: {controller: 'PortalController' , method: 'queryRolesByPortalIdWithPage'}, // 分页查询portal绑定的角色列表
    queryWithPrivatePage: {controller: 'PortalController' , method: 'queryWithPrivatePage'}, // 分页条件查询portals列表(用户)
    queryWithPublicPage: {controller: 'PortalController' , method: 'queryWithPublicPage'}, // 分页条件查询portals列表(管理员)
    unbindRolePortals: {controller: 'PortalController' , method: 'unbindRolePortals'}, // portal解绑角色
    updateContentWithPrivate: {controller: 'PortalController' , method: 'updateContentWithPrivate'}, // 修改内容(用户)
    updateContentWithPublic: {controller: 'PortalController' , method: 'updateContentWithPublic'}, // 修改内容(管理员)
    updateWithPrivate: {controller: 'PortalController' , method: 'updateWithPrivate'}, // 修改(用户)
    updateWithPublic: {controller: 'PortalController' , method: 'updateWithPublic'}, // 修改基本信息(管理员)
};
 //附件管理
let AttachmentController = {
    __name: 'AttachmentController',
    createAttachment: {controller: 'AttachmentController' , method: 'createAttachment'}, // 创建附件
    downloadAttachment: {controller: 'AttachmentController' , method: 'downloadAttachment'}, // 下载附件
    getAttachment: {controller: 'AttachmentController' , method: 'getAttachment'}, // 获取附件
    getAttachmentContent: {controller: 'AttachmentController' , method: 'getAttachmentContent'}, // 获取附件文本内容
    previewAttachment: {controller: 'AttachmentController' , method: 'previewAttachment'}, // 预览附件
    queryAttachments: {controller: 'AttachmentController' , method: 'queryAttachments'}, // 查询附件
    removeAttachment: {controller: 'AttachmentController' , method: 'removeAttachment'}, // 删除附件
    uploadAttachments: {controller: 'AttachmentController' , method: 'uploadAttachments'}, // 上传附件
};

export {
    GroovyController,
    LoggerController,
    JobCodeController,
    JobApiController,
    JobGroupController,
    JobIndexController,
    JobInfoController,
    JobLogController,
    BfpProcessManagerController,
    BfpHandoverManagerController,
    BfpDelegateManagerController,
    BfpAgentManagerController,
    BfpParticipantCalendarController,
    BfpWorkItemManagerController,
    BfpActivityInstManagerController,
    ProcessDefCenterController,
    BfpClientController,
    ProcessInstRecycleManageController,
    ProcessInstanceManageController,
    BfpStatisticsManagerController,
    BfpMultiTenantManagerController,
    BfpProcessConfigController,
    CmController,
    UiController,
    WangblController,
    CommonController,
    SummerController,
    TestController,
    NewcomponentController,
    XifanzhouController,
    Ton0110Controller,
    Wy0404Controller,
    LettersController,
    Yuan_testController,
    YangController,
    Ton0309Controller,
    ZhaoelController,
    Licy_testController,
    CyxdingdanController,
    BizflowController,
    DigitallabController,
    DemoController,
    XifantestController,
    LowcodeBfpTaskCenterController,
    LowcodeBizResourceController,
    LowcodeIntegrationMdmController,
    LowcodeServiceIntegrationController,
    LowcodeColumnModelController,
    LowcodeEntityDatasourceController,
    LowcodeImportHistoryController,
    LowcodeWorkflowEditorController,
    LowcodeToolController,
    LowcodeContributionController,
    LowcodeDebugController,
    LowcodeResourceIndexController,
    LowcodeResourceGroupController,
    LowcodeResourceRecycleController,
    LowcodeResourceController,
    LowcodeRuntimeController,
    LowcodeModelController,
    LowcodeProjectBranchController,
    LowcodeProjectBaselineController,
    LowcodeProjectController,
    LowcodeBiDatasourceController,
    LowcodeBfpWorkbenchController,
    LowcodeComponentGroupController,
    LowcodeComponentController,
    LowcodeDataSourceController,
    RdcloudAfcManagerController,
    BiApiTokenController,
    RdcloudConversationGptModelController,
    RdcloudTemplateController,
    WidgetController,
    BusinessObjectController,
    RdcloudPersonalizationController,
    RdcloudConversationController,
    LowcodeAppTemplateController,
    FunctionCodeToolsController,
    EmployeeController,
    GeneralI18nController,
    OnlineUserController,
    DictTypeController,
    DictEntryController,
    SafetyController,
    ImportHistoryController,
    RdcloudExportExcelController,
    PositionController,
    WorkCalendarTaskController,
    WorkGroupController,
    WorkNoticeController,
    CommonInfoController,
    GeneralModelController,
    AppController,
    DevelopCenterController,
    AuthManagerController,
    OperationLogController,
    OrgController,
    WaterMarkController,
    RdcloudConversationUserStatisticsController,
    LoginManagerController,
    SafetyWhitelistController,
    TenantUpgradeController,
    TenantController,
    StationMessageController,
    SysVariableController,
    MaterialGroupController,
    SourceMaterialController,
    ComponentCenterController,
    LowcodeComponentResourceController,
    OrgAuthorityCenterController,
    DimensionController,
    MenuUsageRecordController,
    MenuController,
    RoleController,
    AfcApiTokenController,
    UserController,
    ResourceProxyController,
    ResGroupProxyController,
    ResGroupController,
    ActuatorController,
    ResourceController,
    SelectionComponentController,
    RdcloudConversationOrgStatisticsController,
    PortalController,
    AttachmentController,
};
